"use strict";(self.webpackChunkto_do_list=self.webpackChunkto_do_list||[]).push([[296],{709:(n,e,t)=>{t.d(e,{Z:()=>l});var a=t(537),r=t.n(a),o=t(645),i=t.n(o)()(r());i.push([n.id,'.flatpickr-calendar {\n  background: transparent;\n  opacity: 0;\n  display: none;\n  text-align: center;\n  visibility: hidden;\n  padding: 0;\n  -webkit-animation: none;\n          animation: none;\n  direction: ltr;\n  border: 0;\n  font-size: 14px;\n  line-height: 24px;\n  border-radius: 5px;\n  position: absolute;\n  width: 307.875px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  background: #fff;\n  -webkit-box-shadow: 1px 0 0 #eee, -1px 0 0 #eee, 0 1px 0 #eee, 0 -1px 0 #eee, 0 3px 13px rgba(0,0,0,0.08);\n          box-shadow: 1px 0 0 #eee, -1px 0 0 #eee, 0 1px 0 #eee, 0 -1px 0 #eee, 0 3px 13px rgba(0,0,0,0.08);\n}\n.flatpickr-calendar.open,\n.flatpickr-calendar.inline {\n  opacity: 1;\n  max-height: 640px;\n  visibility: visible;\n}\n.flatpickr-calendar.open {\n  display: inline-block;\n  z-index: 99999;\n}\n.flatpickr-calendar.animate.open {\n  -webkit-animation: fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);\n          animation: fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n.flatpickr-calendar.inline {\n  display: block;\n  position: relative;\n  top: 2px;\n}\n.flatpickr-calendar.static {\n  position: absolute;\n  top: calc(100% + 2px);\n}\n.flatpickr-calendar.static.open {\n  z-index: 999;\n  display: block;\n}\n.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7) {\n  -webkit-box-shadow: none !important;\n          box-shadow: none !important;\n}\n.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1) {\n  -webkit-box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n          box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n}\n.flatpickr-calendar .hasWeeks .dayContainer,\n.flatpickr-calendar .hasTime .dayContainer {\n  border-bottom: 0;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.flatpickr-calendar .hasWeeks .dayContainer {\n  border-left: 0;\n}\n.flatpickr-calendar.hasTime .flatpickr-time {\n  height: 40px;\n  border-top: 1px solid #eee;\n}\n.flatpickr-calendar.noCalendar.hasTime .flatpickr-time {\n  height: auto;\n}\n.flatpickr-calendar:before,\n.flatpickr-calendar:after {\n  position: absolute;\n  display: block;\n  pointer-events: none;\n  border: solid transparent;\n  content: \'\';\n  height: 0;\n  width: 0;\n  left: 22px;\n}\n.flatpickr-calendar.rightMost:before,\n.flatpickr-calendar.arrowRight:before,\n.flatpickr-calendar.rightMost:after,\n.flatpickr-calendar.arrowRight:after {\n  left: auto;\n  right: 22px;\n}\n.flatpickr-calendar.arrowCenter:before,\n.flatpickr-calendar.arrowCenter:after {\n  left: 50%;\n  right: 50%;\n}\n.flatpickr-calendar:before {\n  border-width: 5px;\n  margin: 0 -5px;\n}\n.flatpickr-calendar:after {\n  border-width: 4px;\n  margin: 0 -4px;\n}\n.flatpickr-calendar.arrowTop:before,\n.flatpickr-calendar.arrowTop:after {\n  bottom: 100%;\n}\n.flatpickr-calendar.arrowTop:before {\n  border-bottom-color: #eee;\n}\n.flatpickr-calendar.arrowTop:after {\n  border-bottom-color: #fff;\n}\n.flatpickr-calendar.arrowBottom:before,\n.flatpickr-calendar.arrowBottom:after {\n  top: 100%;\n}\n.flatpickr-calendar.arrowBottom:before {\n  border-top-color: #eee;\n}\n.flatpickr-calendar.arrowBottom:after {\n  border-top-color: #fff;\n}\n.flatpickr-calendar:focus {\n  outline: 0;\n}\n.flatpickr-wrapper {\n  position: relative;\n  display: inline-block;\n}\n.flatpickr-months {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.flatpickr-months .flatpickr-month {\n  background: transparent;\n  color: #3c3f40;\n  fill: #3c3f40;\n  height: 34px;\n  line-height: 1;\n  text-align: center;\n  position: relative;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n}\n.flatpickr-months .flatpickr-prev-month,\n.flatpickr-months .flatpickr-next-month {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  text-decoration: none;\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  height: 34px;\n  padding: 10px;\n  z-index: 3;\n  color: #3c3f40;\n  fill: #3c3f40;\n}\n.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,\n.flatpickr-months .flatpickr-next-month.flatpickr-disabled {\n  display: none;\n}\n.flatpickr-months .flatpickr-prev-month i,\n.flatpickr-months .flatpickr-next-month i {\n  position: relative;\n}\n.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,\n.flatpickr-months .flatpickr-next-month.flatpickr-prev-month {\n/*\n      /*rtl:begin:ignore*/\n/*\n      */\n  left: 0;\n/*\n      /*rtl:end:ignore*/\n/*\n      */\n}\n/*\n      /*rtl:begin:ignore*/\n/*\n      /*rtl:end:ignore*/\n.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,\n.flatpickr-months .flatpickr-next-month.flatpickr-next-month {\n/*\n      /*rtl:begin:ignore*/\n/*\n      */\n  right: 0;\n/*\n      /*rtl:end:ignore*/\n/*\n      */\n}\n/*\n      /*rtl:begin:ignore*/\n/*\n      /*rtl:end:ignore*/\n.flatpickr-months .flatpickr-prev-month:hover,\n.flatpickr-months .flatpickr-next-month:hover {\n  color: #f64747;\n}\n.flatpickr-months .flatpickr-prev-month:hover svg,\n.flatpickr-months .flatpickr-next-month:hover svg {\n  fill: #f64747;\n}\n.flatpickr-months .flatpickr-prev-month svg,\n.flatpickr-months .flatpickr-next-month svg {\n  width: 14px;\n  height: 14px;\n}\n.flatpickr-months .flatpickr-prev-month svg path,\n.flatpickr-months .flatpickr-next-month svg path {\n  -webkit-transition: fill 0.1s;\n  transition: fill 0.1s;\n  fill: inherit;\n}\n.numInputWrapper {\n  position: relative;\n  height: auto;\n}\n.numInputWrapper input,\n.numInputWrapper span {\n  display: inline-block;\n}\n.numInputWrapper input {\n  width: 100%;\n}\n.numInputWrapper input::-ms-clear {\n  display: none;\n}\n.numInputWrapper input::-webkit-outer-spin-button,\n.numInputWrapper input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n}\n.numInputWrapper span {\n  position: absolute;\n  right: 0;\n  width: 14px;\n  padding: 0 4px 0 2px;\n  height: 50%;\n  line-height: 50%;\n  opacity: 0;\n  cursor: pointer;\n  border: 1px solid rgba(64,72,72,0.15);\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.numInputWrapper span:hover {\n  background: rgba(0,0,0,0.1);\n}\n.numInputWrapper span:active {\n  background: rgba(0,0,0,0.2);\n}\n.numInputWrapper span:after {\n  display: block;\n  content: "";\n  position: absolute;\n}\n.numInputWrapper span.arrowUp {\n  top: 0;\n  border-bottom: 0;\n}\n.numInputWrapper span.arrowUp:after {\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-bottom: 4px solid rgba(64,72,72,0.6);\n  top: 26%;\n}\n.numInputWrapper span.arrowDown {\n  top: 50%;\n}\n.numInputWrapper span.arrowDown:after {\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-top: 4px solid rgba(64,72,72,0.6);\n  top: 40%;\n}\n.numInputWrapper span svg {\n  width: inherit;\n  height: auto;\n}\n.numInputWrapper span svg path {\n  fill: rgba(60,63,64,0.5);\n}\n.numInputWrapper:hover {\n  background: rgba(0,0,0,0.05);\n}\n.numInputWrapper:hover span {\n  opacity: 1;\n}\n.flatpickr-current-month {\n  font-size: 135%;\n  line-height: inherit;\n  font-weight: 300;\n  color: inherit;\n  position: absolute;\n  width: 75%;\n  left: 12.5%;\n  padding: 7.48px 0 0 0;\n  line-height: 1;\n  height: 34px;\n  display: inline-block;\n  text-align: center;\n  -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n}\n.flatpickr-current-month span.cur-month {\n  font-family: inherit;\n  font-weight: 700;\n  color: inherit;\n  display: inline-block;\n  margin-left: 0.5ch;\n  padding: 0;\n}\n.flatpickr-current-month span.cur-month:hover {\n  background: rgba(0,0,0,0.05);\n}\n.flatpickr-current-month .numInputWrapper {\n  width: 6ch;\n  width: 7ch\\0;\n  display: inline-block;\n}\n.flatpickr-current-month .numInputWrapper span.arrowUp:after {\n  border-bottom-color: #3c3f40;\n}\n.flatpickr-current-month .numInputWrapper span.arrowDown:after {\n  border-top-color: #3c3f40;\n}\n.flatpickr-current-month input.cur-year {\n  background: transparent;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: inherit;\n  cursor: text;\n  padding: 0 0 0 0.5ch;\n  margin: 0;\n  display: inline-block;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: 300;\n  line-height: inherit;\n  height: auto;\n  border: 0;\n  border-radius: 0;\n  vertical-align: initial;\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.flatpickr-current-month input.cur-year:focus {\n  outline: 0;\n}\n.flatpickr-current-month input.cur-year[disabled],\n.flatpickr-current-month input.cur-year[disabled]:hover {\n  font-size: 100%;\n  color: rgba(60,63,64,0.5);\n  background: transparent;\n  pointer-events: none;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months {\n  appearance: menulist;\n  background: transparent;\n  border: none;\n  border-radius: 0;\n  box-sizing: border-box;\n  color: inherit;\n  cursor: pointer;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: 300;\n  height: auto;\n  line-height: inherit;\n  margin: -1px 0 0 0;\n  outline: none;\n  padding: 0 0 0 0.5ch;\n  position: relative;\n  vertical-align: initial;\n  -webkit-box-sizing: border-box;\n  -webkit-appearance: menulist;\n  -moz-appearance: menulist;\n  width: auto;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months:focus,\n.flatpickr-current-month .flatpickr-monthDropdown-months:active {\n  outline: none;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months:hover {\n  background: rgba(0,0,0,0.05);\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month {\n  background-color: transparent;\n  outline: none;\n  padding: 0;\n}\n.flatpickr-weekdays {\n  background: transparent;\n  text-align: center;\n  overflow: hidden;\n  width: 100%;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 28px;\n}\n.flatpickr-weekdays .flatpickr-weekdaycontainer {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n}\nspan.flatpickr-weekday {\n  cursor: default;\n  font-size: 90%;\n  background: transparent;\n  color: rgba(0,0,0,0.54);\n  line-height: 1;\n  margin: 0;\n  text-align: center;\n  display: block;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  font-weight: bolder;\n}\n.dayContainer,\n.flatpickr-weeks {\n  padding: 1px 0 0 0;\n}\n.flatpickr-days {\n  position: relative;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -webkit-align-items: flex-start;\n      -ms-flex-align: start;\n          align-items: flex-start;\n  width: 307.875px;\n}\n.flatpickr-days:focus {\n  outline: 0;\n}\n.dayContainer {\n  padding: 0;\n  outline: 0;\n  text-align: left;\n  width: 307.875px;\n  min-width: 307.875px;\n  max-width: 307.875px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: inline-block;\n  display: -ms-flexbox;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n          flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  -ms-flex-pack: justify;\n  -webkit-justify-content: space-around;\n          justify-content: space-around;\n  -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n  opacity: 1;\n}\n.dayContainer + .dayContainer {\n  -webkit-box-shadow: -1px 0 0 #eee;\n          box-shadow: -1px 0 0 #eee;\n}\n.flatpickr-day {\n  background: none;\n  border: 1px solid transparent;\n  border-radius: 150px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #404848;\n  cursor: pointer;\n  font-weight: 400;\n  width: 14.2857143%;\n  -webkit-flex-basis: 14.2857143%;\n      -ms-flex-preferred-size: 14.2857143%;\n          flex-basis: 14.2857143%;\n  max-width: 39px;\n  height: 39px;\n  line-height: 39px;\n  margin: 0;\n  display: inline-block;\n  position: relative;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  text-align: center;\n}\n.flatpickr-day.inRange,\n.flatpickr-day.prevMonthDay.inRange,\n.flatpickr-day.nextMonthDay.inRange,\n.flatpickr-day.today.inRange,\n.flatpickr-day.prevMonthDay.today.inRange,\n.flatpickr-day.nextMonthDay.today.inRange,\n.flatpickr-day:hover,\n.flatpickr-day.prevMonthDay:hover,\n.flatpickr-day.nextMonthDay:hover,\n.flatpickr-day:focus,\n.flatpickr-day.prevMonthDay:focus,\n.flatpickr-day.nextMonthDay:focus {\n  cursor: pointer;\n  outline: 0;\n  background: #e9e9e9;\n  border-color: #e9e9e9;\n}\n.flatpickr-day.today {\n  border-color: #f64747;\n}\n.flatpickr-day.today:hover,\n.flatpickr-day.today:focus {\n  border-color: #f64747;\n  background: #f64747;\n  color: #fff;\n}\n.flatpickr-day.selected,\n.flatpickr-day.startRange,\n.flatpickr-day.endRange,\n.flatpickr-day.selected.inRange,\n.flatpickr-day.startRange.inRange,\n.flatpickr-day.endRange.inRange,\n.flatpickr-day.selected:focus,\n.flatpickr-day.startRange:focus,\n.flatpickr-day.endRange:focus,\n.flatpickr-day.selected:hover,\n.flatpickr-day.startRange:hover,\n.flatpickr-day.endRange:hover,\n.flatpickr-day.selected.prevMonthDay,\n.flatpickr-day.startRange.prevMonthDay,\n.flatpickr-day.endRange.prevMonthDay,\n.flatpickr-day.selected.nextMonthDay,\n.flatpickr-day.startRange.nextMonthDay,\n.flatpickr-day.endRange.nextMonthDay {\n  background: #4f99ff;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  color: #fff;\n  border-color: #4f99ff;\n}\n.flatpickr-day.selected.startRange,\n.flatpickr-day.startRange.startRange,\n.flatpickr-day.endRange.startRange {\n  border-radius: 50px 0 0 50px;\n}\n.flatpickr-day.selected.endRange,\n.flatpickr-day.startRange.endRange,\n.flatpickr-day.endRange.endRange {\n  border-radius: 0 50px 50px 0;\n}\n.flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n+1)),\n.flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n+1)),\n.flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n+1)) {\n  -webkit-box-shadow: -10px 0 0 #4f99ff;\n          box-shadow: -10px 0 0 #4f99ff;\n}\n.flatpickr-day.selected.startRange.endRange,\n.flatpickr-day.startRange.startRange.endRange,\n.flatpickr-day.endRange.startRange.endRange {\n  border-radius: 50px;\n}\n.flatpickr-day.inRange {\n  border-radius: 0;\n  -webkit-box-shadow: -5px 0 0 #e9e9e9, 5px 0 0 #e9e9e9;\n          box-shadow: -5px 0 0 #e9e9e9, 5px 0 0 #e9e9e9;\n}\n.flatpickr-day.flatpickr-disabled,\n.flatpickr-day.flatpickr-disabled:hover,\n.flatpickr-day.prevMonthDay,\n.flatpickr-day.nextMonthDay,\n.flatpickr-day.notAllowed,\n.flatpickr-day.notAllowed.prevMonthDay,\n.flatpickr-day.notAllowed.nextMonthDay {\n  color: rgba(64,72,72,0.3);\n  background: transparent;\n  border-color: #e9e9e9;\n  cursor: default;\n}\n.flatpickr-day.flatpickr-disabled,\n.flatpickr-day.flatpickr-disabled:hover {\n  cursor: not-allowed;\n  color: rgba(64,72,72,0.1);\n}\n.flatpickr-day.week.selected {\n  border-radius: 0;\n  -webkit-box-shadow: -5px 0 0 #4f99ff, 5px 0 0 #4f99ff;\n          box-shadow: -5px 0 0 #4f99ff, 5px 0 0 #4f99ff;\n}\n.flatpickr-day.hidden {\n  visibility: hidden;\n}\n.rangeMode .flatpickr-day {\n  margin-top: 1px;\n}\n.flatpickr-weekwrapper {\n  float: left;\n}\n.flatpickr-weekwrapper .flatpickr-weeks {\n  padding: 0 12px;\n  -webkit-box-shadow: 1px 0 0 #eee;\n          box-shadow: 1px 0 0 #eee;\n}\n.flatpickr-weekwrapper .flatpickr-weekday {\n  float: none;\n  width: 100%;\n  line-height: 28px;\n}\n.flatpickr-weekwrapper span.flatpickr-day,\n.flatpickr-weekwrapper span.flatpickr-day:hover {\n  display: block;\n  width: 100%;\n  max-width: none;\n  color: rgba(64,72,72,0.3);\n  background: transparent;\n  cursor: default;\n  border: none;\n}\n.flatpickr-innerContainer {\n  display: block;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: hidden;\n}\n.flatpickr-rContainer {\n  display: inline-block;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.flatpickr-time {\n  text-align: center;\n  outline: 0;\n  display: block;\n  height: 0;\n  line-height: 40px;\n  max-height: 40px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.flatpickr-time:after {\n  content: "";\n  display: table;\n  clear: both;\n}\n.flatpickr-time .numInputWrapper {\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  width: 40%;\n  height: 40px;\n  float: left;\n}\n.flatpickr-time .numInputWrapper span.arrowUp:after {\n  border-bottom-color: #404848;\n}\n.flatpickr-time .numInputWrapper span.arrowDown:after {\n  border-top-color: #404848;\n}\n.flatpickr-time.hasSeconds .numInputWrapper {\n  width: 26%;\n}\n.flatpickr-time.time24hr .numInputWrapper {\n  width: 49%;\n}\n.flatpickr-time input {\n  background: transparent;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border: 0;\n  border-radius: 0;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  height: inherit;\n  line-height: inherit;\n  color: #404848;\n  font-size: 14px;\n  position: relative;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.flatpickr-time input.flatpickr-hour {\n  font-weight: bold;\n}\n.flatpickr-time input.flatpickr-minute,\n.flatpickr-time input.flatpickr-second {\n  font-weight: 400;\n}\n.flatpickr-time input:focus {\n  outline: 0;\n  border: 0;\n}\n.flatpickr-time .flatpickr-time-separator,\n.flatpickr-time .flatpickr-am-pm {\n  height: inherit;\n  float: left;\n  line-height: inherit;\n  color: #404848;\n  font-weight: bold;\n  width: 2%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-align-self: center;\n      -ms-flex-item-align: center;\n          align-self: center;\n}\n.flatpickr-time .flatpickr-am-pm {\n  outline: 0;\n  width: 18%;\n  cursor: pointer;\n  text-align: center;\n  font-weight: 400;\n}\n.flatpickr-time input:hover,\n.flatpickr-time .flatpickr-am-pm:hover,\n.flatpickr-time input:focus,\n.flatpickr-time .flatpickr-am-pm:focus {\n  background: #f1f1f1;\n}\n.flatpickr-input[readonly] {\n  cursor: pointer;\n}\n@-webkit-keyframes fpFadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n            transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes fpFadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n            transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n.flatpickr-calendar {\n  width: 307.875px;\n}\n.dayContainer {\n  padding: 0;\n  border-right: 0;\n}\nspan.flatpickr-day,\nspan.flatpickr-day.prevMonthDay,\nspan.flatpickr-day.nextMonthDay {\n  border-radius: 0 !important;\n  border: 1px solid #e9e9e9;\n  max-width: none;\n  border-right-color: transparent;\n}\nspan.flatpickr-day:nth-child(n+8),\nspan.flatpickr-day.prevMonthDay:nth-child(n+8),\nspan.flatpickr-day.nextMonthDay:nth-child(n+8) {\n  border-top-color: transparent;\n}\nspan.flatpickr-day:nth-child(7n-6),\nspan.flatpickr-day.prevMonthDay:nth-child(7n-6),\nspan.flatpickr-day.nextMonthDay:nth-child(7n-6) {\n  border-left: 0;\n}\nspan.flatpickr-day:nth-child(n+36),\nspan.flatpickr-day.prevMonthDay:nth-child(n+36),\nspan.flatpickr-day.nextMonthDay:nth-child(n+36) {\n  border-bottom: 0;\n}\nspan.flatpickr-day:nth-child(-n+7),\nspan.flatpickr-day.prevMonthDay:nth-child(-n+7),\nspan.flatpickr-day.nextMonthDay:nth-child(-n+7) {\n  margin-top: 0;\n}\nspan.flatpickr-day.today:not(.selected),\nspan.flatpickr-day.prevMonthDay.today:not(.selected),\nspan.flatpickr-day.nextMonthDay.today:not(.selected) {\n  border-color: #e9e9e9;\n  border-right-color: transparent;\n  border-top-color: transparent;\n  border-bottom-color: #f64747;\n}\nspan.flatpickr-day.today:not(.selected):hover,\nspan.flatpickr-day.prevMonthDay.today:not(.selected):hover,\nspan.flatpickr-day.nextMonthDay.today:not(.selected):hover {\n  border: 1px solid #f64747;\n}\nspan.flatpickr-day.startRange,\nspan.flatpickr-day.prevMonthDay.startRange,\nspan.flatpickr-day.nextMonthDay.startRange,\nspan.flatpickr-day.endRange,\nspan.flatpickr-day.prevMonthDay.endRange,\nspan.flatpickr-day.nextMonthDay.endRange {\n  border-color: #4f99ff;\n}\nspan.flatpickr-day.today,\nspan.flatpickr-day.prevMonthDay.today,\nspan.flatpickr-day.nextMonthDay.today,\nspan.flatpickr-day.selected,\nspan.flatpickr-day.prevMonthDay.selected,\nspan.flatpickr-day.nextMonthDay.selected {\n  z-index: 2;\n}\n.rangeMode .flatpickr-day {\n  margin-top: -1px;\n}\n.flatpickr-weekwrapper .flatpickr-weeks {\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.flatpickr-weekwrapper span.flatpickr-day {\n  border: 0;\n  margin: -1px 0 0 -1px;\n}\n.hasWeeks .flatpickr-days {\n  border-right: 0;\n}\n\n\t@media screen and (min-width:0\\0) and (min-resolution: +72dpi) {\n\t\tspan.flatpickr-day {\n\t\t\tdisplay: block;\n\t\t\t-webkit-box-flex: 1;\n\t\t\t-webkit-flex: 1 0 auto;\n\t\t\t    -ms-flex: 1 0 auto;\n\t\t\t        flex: 1 0 auto;\n\t\t}\n\t}\n',"",{version:3,sources:["webpack://./node_modules/flatpickr/dist/themes/airbnb.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,UAAU;EACV,aAAa;EACb,kBAAkB;EAClB,kBAAkB;EAClB,UAAU;EACV,uBAAuB;UACf,eAAe;EACvB,cAAc;EACd,SAAS;EACT,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,8BAA8B;UACtB,sBAAsB;EAC9B,8BAA8B;MAC1B,0BAA0B;EAC9B,gBAAgB;EAChB,yGAAyG;UACjG,iGAAiG;AAC3G;AACA;;EAEE,UAAU;EACV,iBAAiB;EACjB,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,cAAc;AAChB;AACA;EACE,oEAAoE;UAC5D,4DAA4D;AACtE;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,QAAQ;AACV;AACA;EACE,kBAAkB;EAClB,qBAAqB;AACvB;AACA;EACE,YAAY;EACZ,cAAc;AAChB;AACA;EACE,mCAAmC;UAC3B,2BAA2B;AACrC;AACA;EACE,qDAAqD;UAC7C,6CAA6C;AACvD;AACA;;EAEE,gBAAgB;EAChB,6BAA6B;EAC7B,4BAA4B;AAC9B;AACA;EACE,cAAc;AAChB;AACA;EACE,YAAY;EACZ,0BAA0B;AAC5B;AACA;EACE,YAAY;AACd;AACA;;EAEE,kBAAkB;EAClB,cAAc;EACd,oBAAoB;EACpB,yBAAyB;EACzB,WAAW;EACX,SAAS;EACT,QAAQ;EACR,UAAU;AACZ;AACA;;;;EAIE,UAAU;EACV,WAAW;AACb;AACA;;EAEE,SAAS;EACT,UAAU;AACZ;AACA;EACE,iBAAiB;EACjB,cAAc;AAChB;AACA;EACE,iBAAiB;EACjB,cAAc;AAChB;AACA;;EAEE,YAAY;AACd;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB;AAC3B;AACA;;EAEE,SAAS;AACX;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,UAAU;AACZ;AACA;EACE,kBAAkB;EAClB,qBAAqB;AACvB;AACA;EACE,oBAAoB;EACpB,qBAAqB;EACrB,oBAAoB;EACpB,aAAa;AACf;AACA;EACE,uBAAuB;EACvB,cAAc;EACd,aAAa;EACb,YAAY;EACZ,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;KACtB,sBAAsB;MACrB,qBAAqB;UACjB,iBAAiB;EACzB,gBAAgB;EAChB,mBAAmB;EACnB,eAAe;MACX,WAAW;UACP,OAAO;AACjB;AACA;;EAEE,yBAAyB;KACtB,sBAAsB;MACrB,qBAAqB;UACjB,iBAAiB;EACzB,qBAAqB;EACrB,eAAe;EACf,kBAAkB;EAClB,MAAM;EACN,YAAY;EACZ,aAAa;EACb,UAAU;EACV,cAAc;EACd,aAAa;AACf;AACA;;EAEE,aAAa;AACf;AACA;;EAEE,kBAAkB;AACpB;AACA;;AAEA;yBACyB;AACzB;OACO;EACL,OAAO;AACT;uBACuB;AACvB;OACO;AACP;AACA;yBACyB;AACzB;uBACuB;AACvB;;AAEA;yBACyB;AACzB;OACO;EACL,QAAQ;AACV;uBACuB;AACvB;OACO;AACP;AACA;yBACyB;AACzB;uBACuB;AACvB;;EAEE,cAAc;AAChB;AACA;;EAEE,aAAa;AACf;AACA;;EAEE,WAAW;EACX,YAAY;AACd;AACA;;EAEE,6BAA6B;EAC7B,qBAAqB;EACrB,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,YAAY;AACd;AACA;;EAEE,qBAAqB;AACvB;AACA;EACE,WAAW;AACb;AACA;EACE,aAAa;AACf;AACA;;EAEE,SAAS;EACT,wBAAwB;AAC1B;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,WAAW;EACX,oBAAoB;EACpB,WAAW;EACX,gBAAgB;EAChB,UAAU;EACV,eAAe;EACf,qCAAqC;EACrC,8BAA8B;UACtB,sBAAsB;AAChC;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,cAAc;EACd,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,MAAM;EACN,gBAAgB;AAClB;AACA;EACE,kCAAkC;EAClC,mCAAmC;EACnC,2CAA2C;EAC3C,QAAQ;AACV;AACA;EACE,QAAQ;AACV;AACA;EACE,kCAAkC;EAClC,mCAAmC;EACnC,wCAAwC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",sourcesContent:['.flatpickr-calendar {\n  background: transparent;\n  opacity: 0;\n  display: none;\n  text-align: center;\n  visibility: hidden;\n  padding: 0;\n  -webkit-animation: none;\n          animation: none;\n  direction: ltr;\n  border: 0;\n  font-size: 14px;\n  line-height: 24px;\n  border-radius: 5px;\n  position: absolute;\n  width: 307.875px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  background: #fff;\n  -webkit-box-shadow: 1px 0 0 #eee, -1px 0 0 #eee, 0 1px 0 #eee, 0 -1px 0 #eee, 0 3px 13px rgba(0,0,0,0.08);\n          box-shadow: 1px 0 0 #eee, -1px 0 0 #eee, 0 1px 0 #eee, 0 -1px 0 #eee, 0 3px 13px rgba(0,0,0,0.08);\n}\n.flatpickr-calendar.open,\n.flatpickr-calendar.inline {\n  opacity: 1;\n  max-height: 640px;\n  visibility: visible;\n}\n.flatpickr-calendar.open {\n  display: inline-block;\n  z-index: 99999;\n}\n.flatpickr-calendar.animate.open {\n  -webkit-animation: fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);\n          animation: fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n.flatpickr-calendar.inline {\n  display: block;\n  position: relative;\n  top: 2px;\n}\n.flatpickr-calendar.static {\n  position: absolute;\n  top: calc(100% + 2px);\n}\n.flatpickr-calendar.static.open {\n  z-index: 999;\n  display: block;\n}\n.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7) {\n  -webkit-box-shadow: none !important;\n          box-shadow: none !important;\n}\n.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1) {\n  -webkit-box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n          box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n}\n.flatpickr-calendar .hasWeeks .dayContainer,\n.flatpickr-calendar .hasTime .dayContainer {\n  border-bottom: 0;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.flatpickr-calendar .hasWeeks .dayContainer {\n  border-left: 0;\n}\n.flatpickr-calendar.hasTime .flatpickr-time {\n  height: 40px;\n  border-top: 1px solid #eee;\n}\n.flatpickr-calendar.noCalendar.hasTime .flatpickr-time {\n  height: auto;\n}\n.flatpickr-calendar:before,\n.flatpickr-calendar:after {\n  position: absolute;\n  display: block;\n  pointer-events: none;\n  border: solid transparent;\n  content: \'\';\n  height: 0;\n  width: 0;\n  left: 22px;\n}\n.flatpickr-calendar.rightMost:before,\n.flatpickr-calendar.arrowRight:before,\n.flatpickr-calendar.rightMost:after,\n.flatpickr-calendar.arrowRight:after {\n  left: auto;\n  right: 22px;\n}\n.flatpickr-calendar.arrowCenter:before,\n.flatpickr-calendar.arrowCenter:after {\n  left: 50%;\n  right: 50%;\n}\n.flatpickr-calendar:before {\n  border-width: 5px;\n  margin: 0 -5px;\n}\n.flatpickr-calendar:after {\n  border-width: 4px;\n  margin: 0 -4px;\n}\n.flatpickr-calendar.arrowTop:before,\n.flatpickr-calendar.arrowTop:after {\n  bottom: 100%;\n}\n.flatpickr-calendar.arrowTop:before {\n  border-bottom-color: #eee;\n}\n.flatpickr-calendar.arrowTop:after {\n  border-bottom-color: #fff;\n}\n.flatpickr-calendar.arrowBottom:before,\n.flatpickr-calendar.arrowBottom:after {\n  top: 100%;\n}\n.flatpickr-calendar.arrowBottom:before {\n  border-top-color: #eee;\n}\n.flatpickr-calendar.arrowBottom:after {\n  border-top-color: #fff;\n}\n.flatpickr-calendar:focus {\n  outline: 0;\n}\n.flatpickr-wrapper {\n  position: relative;\n  display: inline-block;\n}\n.flatpickr-months {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.flatpickr-months .flatpickr-month {\n  background: transparent;\n  color: #3c3f40;\n  fill: #3c3f40;\n  height: 34px;\n  line-height: 1;\n  text-align: center;\n  position: relative;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n}\n.flatpickr-months .flatpickr-prev-month,\n.flatpickr-months .flatpickr-next-month {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  text-decoration: none;\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  height: 34px;\n  padding: 10px;\n  z-index: 3;\n  color: #3c3f40;\n  fill: #3c3f40;\n}\n.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,\n.flatpickr-months .flatpickr-next-month.flatpickr-disabled {\n  display: none;\n}\n.flatpickr-months .flatpickr-prev-month i,\n.flatpickr-months .flatpickr-next-month i {\n  position: relative;\n}\n.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,\n.flatpickr-months .flatpickr-next-month.flatpickr-prev-month {\n/*\n      /*rtl:begin:ignore*/\n/*\n      */\n  left: 0;\n/*\n      /*rtl:end:ignore*/\n/*\n      */\n}\n/*\n      /*rtl:begin:ignore*/\n/*\n      /*rtl:end:ignore*/\n.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,\n.flatpickr-months .flatpickr-next-month.flatpickr-next-month {\n/*\n      /*rtl:begin:ignore*/\n/*\n      */\n  right: 0;\n/*\n      /*rtl:end:ignore*/\n/*\n      */\n}\n/*\n      /*rtl:begin:ignore*/\n/*\n      /*rtl:end:ignore*/\n.flatpickr-months .flatpickr-prev-month:hover,\n.flatpickr-months .flatpickr-next-month:hover {\n  color: #f64747;\n}\n.flatpickr-months .flatpickr-prev-month:hover svg,\n.flatpickr-months .flatpickr-next-month:hover svg {\n  fill: #f64747;\n}\n.flatpickr-months .flatpickr-prev-month svg,\n.flatpickr-months .flatpickr-next-month svg {\n  width: 14px;\n  height: 14px;\n}\n.flatpickr-months .flatpickr-prev-month svg path,\n.flatpickr-months .flatpickr-next-month svg path {\n  -webkit-transition: fill 0.1s;\n  transition: fill 0.1s;\n  fill: inherit;\n}\n.numInputWrapper {\n  position: relative;\n  height: auto;\n}\n.numInputWrapper input,\n.numInputWrapper span {\n  display: inline-block;\n}\n.numInputWrapper input {\n  width: 100%;\n}\n.numInputWrapper input::-ms-clear {\n  display: none;\n}\n.numInputWrapper input::-webkit-outer-spin-button,\n.numInputWrapper input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n}\n.numInputWrapper span {\n  position: absolute;\n  right: 0;\n  width: 14px;\n  padding: 0 4px 0 2px;\n  height: 50%;\n  line-height: 50%;\n  opacity: 0;\n  cursor: pointer;\n  border: 1px solid rgba(64,72,72,0.15);\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.numInputWrapper span:hover {\n  background: rgba(0,0,0,0.1);\n}\n.numInputWrapper span:active {\n  background: rgba(0,0,0,0.2);\n}\n.numInputWrapper span:after {\n  display: block;\n  content: "";\n  position: absolute;\n}\n.numInputWrapper span.arrowUp {\n  top: 0;\n  border-bottom: 0;\n}\n.numInputWrapper span.arrowUp:after {\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-bottom: 4px solid rgba(64,72,72,0.6);\n  top: 26%;\n}\n.numInputWrapper span.arrowDown {\n  top: 50%;\n}\n.numInputWrapper span.arrowDown:after {\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-top: 4px solid rgba(64,72,72,0.6);\n  top: 40%;\n}\n.numInputWrapper span svg {\n  width: inherit;\n  height: auto;\n}\n.numInputWrapper span svg path {\n  fill: rgba(60,63,64,0.5);\n}\n.numInputWrapper:hover {\n  background: rgba(0,0,0,0.05);\n}\n.numInputWrapper:hover span {\n  opacity: 1;\n}\n.flatpickr-current-month {\n  font-size: 135%;\n  line-height: inherit;\n  font-weight: 300;\n  color: inherit;\n  position: absolute;\n  width: 75%;\n  left: 12.5%;\n  padding: 7.48px 0 0 0;\n  line-height: 1;\n  height: 34px;\n  display: inline-block;\n  text-align: center;\n  -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n}\n.flatpickr-current-month span.cur-month {\n  font-family: inherit;\n  font-weight: 700;\n  color: inherit;\n  display: inline-block;\n  margin-left: 0.5ch;\n  padding: 0;\n}\n.flatpickr-current-month span.cur-month:hover {\n  background: rgba(0,0,0,0.05);\n}\n.flatpickr-current-month .numInputWrapper {\n  width: 6ch;\n  width: 7ch\\0;\n  display: inline-block;\n}\n.flatpickr-current-month .numInputWrapper span.arrowUp:after {\n  border-bottom-color: #3c3f40;\n}\n.flatpickr-current-month .numInputWrapper span.arrowDown:after {\n  border-top-color: #3c3f40;\n}\n.flatpickr-current-month input.cur-year {\n  background: transparent;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: inherit;\n  cursor: text;\n  padding: 0 0 0 0.5ch;\n  margin: 0;\n  display: inline-block;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: 300;\n  line-height: inherit;\n  height: auto;\n  border: 0;\n  border-radius: 0;\n  vertical-align: initial;\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.flatpickr-current-month input.cur-year:focus {\n  outline: 0;\n}\n.flatpickr-current-month input.cur-year[disabled],\n.flatpickr-current-month input.cur-year[disabled]:hover {\n  font-size: 100%;\n  color: rgba(60,63,64,0.5);\n  background: transparent;\n  pointer-events: none;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months {\n  appearance: menulist;\n  background: transparent;\n  border: none;\n  border-radius: 0;\n  box-sizing: border-box;\n  color: inherit;\n  cursor: pointer;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: 300;\n  height: auto;\n  line-height: inherit;\n  margin: -1px 0 0 0;\n  outline: none;\n  padding: 0 0 0 0.5ch;\n  position: relative;\n  vertical-align: initial;\n  -webkit-box-sizing: border-box;\n  -webkit-appearance: menulist;\n  -moz-appearance: menulist;\n  width: auto;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months:focus,\n.flatpickr-current-month .flatpickr-monthDropdown-months:active {\n  outline: none;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months:hover {\n  background: rgba(0,0,0,0.05);\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month {\n  background-color: transparent;\n  outline: none;\n  padding: 0;\n}\n.flatpickr-weekdays {\n  background: transparent;\n  text-align: center;\n  overflow: hidden;\n  width: 100%;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 28px;\n}\n.flatpickr-weekdays .flatpickr-weekdaycontainer {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n}\nspan.flatpickr-weekday {\n  cursor: default;\n  font-size: 90%;\n  background: transparent;\n  color: rgba(0,0,0,0.54);\n  line-height: 1;\n  margin: 0;\n  text-align: center;\n  display: block;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  font-weight: bolder;\n}\n.dayContainer,\n.flatpickr-weeks {\n  padding: 1px 0 0 0;\n}\n.flatpickr-days {\n  position: relative;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -webkit-align-items: flex-start;\n      -ms-flex-align: start;\n          align-items: flex-start;\n  width: 307.875px;\n}\n.flatpickr-days:focus {\n  outline: 0;\n}\n.dayContainer {\n  padding: 0;\n  outline: 0;\n  text-align: left;\n  width: 307.875px;\n  min-width: 307.875px;\n  max-width: 307.875px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: inline-block;\n  display: -ms-flexbox;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n          flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  -ms-flex-pack: justify;\n  -webkit-justify-content: space-around;\n          justify-content: space-around;\n  -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n  opacity: 1;\n}\n.dayContainer + .dayContainer {\n  -webkit-box-shadow: -1px 0 0 #eee;\n          box-shadow: -1px 0 0 #eee;\n}\n.flatpickr-day {\n  background: none;\n  border: 1px solid transparent;\n  border-radius: 150px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #404848;\n  cursor: pointer;\n  font-weight: 400;\n  width: 14.2857143%;\n  -webkit-flex-basis: 14.2857143%;\n      -ms-flex-preferred-size: 14.2857143%;\n          flex-basis: 14.2857143%;\n  max-width: 39px;\n  height: 39px;\n  line-height: 39px;\n  margin: 0;\n  display: inline-block;\n  position: relative;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  text-align: center;\n}\n.flatpickr-day.inRange,\n.flatpickr-day.prevMonthDay.inRange,\n.flatpickr-day.nextMonthDay.inRange,\n.flatpickr-day.today.inRange,\n.flatpickr-day.prevMonthDay.today.inRange,\n.flatpickr-day.nextMonthDay.today.inRange,\n.flatpickr-day:hover,\n.flatpickr-day.prevMonthDay:hover,\n.flatpickr-day.nextMonthDay:hover,\n.flatpickr-day:focus,\n.flatpickr-day.prevMonthDay:focus,\n.flatpickr-day.nextMonthDay:focus {\n  cursor: pointer;\n  outline: 0;\n  background: #e9e9e9;\n  border-color: #e9e9e9;\n}\n.flatpickr-day.today {\n  border-color: #f64747;\n}\n.flatpickr-day.today:hover,\n.flatpickr-day.today:focus {\n  border-color: #f64747;\n  background: #f64747;\n  color: #fff;\n}\n.flatpickr-day.selected,\n.flatpickr-day.startRange,\n.flatpickr-day.endRange,\n.flatpickr-day.selected.inRange,\n.flatpickr-day.startRange.inRange,\n.flatpickr-day.endRange.inRange,\n.flatpickr-day.selected:focus,\n.flatpickr-day.startRange:focus,\n.flatpickr-day.endRange:focus,\n.flatpickr-day.selected:hover,\n.flatpickr-day.startRange:hover,\n.flatpickr-day.endRange:hover,\n.flatpickr-day.selected.prevMonthDay,\n.flatpickr-day.startRange.prevMonthDay,\n.flatpickr-day.endRange.prevMonthDay,\n.flatpickr-day.selected.nextMonthDay,\n.flatpickr-day.startRange.nextMonthDay,\n.flatpickr-day.endRange.nextMonthDay {\n  background: #4f99ff;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  color: #fff;\n  border-color: #4f99ff;\n}\n.flatpickr-day.selected.startRange,\n.flatpickr-day.startRange.startRange,\n.flatpickr-day.endRange.startRange {\n  border-radius: 50px 0 0 50px;\n}\n.flatpickr-day.selected.endRange,\n.flatpickr-day.startRange.endRange,\n.flatpickr-day.endRange.endRange {\n  border-radius: 0 50px 50px 0;\n}\n.flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n+1)),\n.flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n+1)),\n.flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n+1)) {\n  -webkit-box-shadow: -10px 0 0 #4f99ff;\n          box-shadow: -10px 0 0 #4f99ff;\n}\n.flatpickr-day.selected.startRange.endRange,\n.flatpickr-day.startRange.startRange.endRange,\n.flatpickr-day.endRange.startRange.endRange {\n  border-radius: 50px;\n}\n.flatpickr-day.inRange {\n  border-radius: 0;\n  -webkit-box-shadow: -5px 0 0 #e9e9e9, 5px 0 0 #e9e9e9;\n          box-shadow: -5px 0 0 #e9e9e9, 5px 0 0 #e9e9e9;\n}\n.flatpickr-day.flatpickr-disabled,\n.flatpickr-day.flatpickr-disabled:hover,\n.flatpickr-day.prevMonthDay,\n.flatpickr-day.nextMonthDay,\n.flatpickr-day.notAllowed,\n.flatpickr-day.notAllowed.prevMonthDay,\n.flatpickr-day.notAllowed.nextMonthDay {\n  color: rgba(64,72,72,0.3);\n  background: transparent;\n  border-color: #e9e9e9;\n  cursor: default;\n}\n.flatpickr-day.flatpickr-disabled,\n.flatpickr-day.flatpickr-disabled:hover {\n  cursor: not-allowed;\n  color: rgba(64,72,72,0.1);\n}\n.flatpickr-day.week.selected {\n  border-radius: 0;\n  -webkit-box-shadow: -5px 0 0 #4f99ff, 5px 0 0 #4f99ff;\n          box-shadow: -5px 0 0 #4f99ff, 5px 0 0 #4f99ff;\n}\n.flatpickr-day.hidden {\n  visibility: hidden;\n}\n.rangeMode .flatpickr-day {\n  margin-top: 1px;\n}\n.flatpickr-weekwrapper {\n  float: left;\n}\n.flatpickr-weekwrapper .flatpickr-weeks {\n  padding: 0 12px;\n  -webkit-box-shadow: 1px 0 0 #eee;\n          box-shadow: 1px 0 0 #eee;\n}\n.flatpickr-weekwrapper .flatpickr-weekday {\n  float: none;\n  width: 100%;\n  line-height: 28px;\n}\n.flatpickr-weekwrapper span.flatpickr-day,\n.flatpickr-weekwrapper span.flatpickr-day:hover {\n  display: block;\n  width: 100%;\n  max-width: none;\n  color: rgba(64,72,72,0.3);\n  background: transparent;\n  cursor: default;\n  border: none;\n}\n.flatpickr-innerContainer {\n  display: block;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: hidden;\n}\n.flatpickr-rContainer {\n  display: inline-block;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.flatpickr-time {\n  text-align: center;\n  outline: 0;\n  display: block;\n  height: 0;\n  line-height: 40px;\n  max-height: 40px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.flatpickr-time:after {\n  content: "";\n  display: table;\n  clear: both;\n}\n.flatpickr-time .numInputWrapper {\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  width: 40%;\n  height: 40px;\n  float: left;\n}\n.flatpickr-time .numInputWrapper span.arrowUp:after {\n  border-bottom-color: #404848;\n}\n.flatpickr-time .numInputWrapper span.arrowDown:after {\n  border-top-color: #404848;\n}\n.flatpickr-time.hasSeconds .numInputWrapper {\n  width: 26%;\n}\n.flatpickr-time.time24hr .numInputWrapper {\n  width: 49%;\n}\n.flatpickr-time input {\n  background: transparent;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border: 0;\n  border-radius: 0;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  height: inherit;\n  line-height: inherit;\n  color: #404848;\n  font-size: 14px;\n  position: relative;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.flatpickr-time input.flatpickr-hour {\n  font-weight: bold;\n}\n.flatpickr-time input.flatpickr-minute,\n.flatpickr-time input.flatpickr-second {\n  font-weight: 400;\n}\n.flatpickr-time input:focus {\n  outline: 0;\n  border: 0;\n}\n.flatpickr-time .flatpickr-time-separator,\n.flatpickr-time .flatpickr-am-pm {\n  height: inherit;\n  float: left;\n  line-height: inherit;\n  color: #404848;\n  font-weight: bold;\n  width: 2%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-align-self: center;\n      -ms-flex-item-align: center;\n          align-self: center;\n}\n.flatpickr-time .flatpickr-am-pm {\n  outline: 0;\n  width: 18%;\n  cursor: pointer;\n  text-align: center;\n  font-weight: 400;\n}\n.flatpickr-time input:hover,\n.flatpickr-time .flatpickr-am-pm:hover,\n.flatpickr-time input:focus,\n.flatpickr-time .flatpickr-am-pm:focus {\n  background: #f1f1f1;\n}\n.flatpickr-input[readonly] {\n  cursor: pointer;\n}\n@-webkit-keyframes fpFadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n            transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes fpFadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n            transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n.flatpickr-calendar {\n  width: 307.875px;\n}\n.dayContainer {\n  padding: 0;\n  border-right: 0;\n}\nspan.flatpickr-day,\nspan.flatpickr-day.prevMonthDay,\nspan.flatpickr-day.nextMonthDay {\n  border-radius: 0 !important;\n  border: 1px solid #e9e9e9;\n  max-width: none;\n  border-right-color: transparent;\n}\nspan.flatpickr-day:nth-child(n+8),\nspan.flatpickr-day.prevMonthDay:nth-child(n+8),\nspan.flatpickr-day.nextMonthDay:nth-child(n+8) {\n  border-top-color: transparent;\n}\nspan.flatpickr-day:nth-child(7n-6),\nspan.flatpickr-day.prevMonthDay:nth-child(7n-6),\nspan.flatpickr-day.nextMonthDay:nth-child(7n-6) {\n  border-left: 0;\n}\nspan.flatpickr-day:nth-child(n+36),\nspan.flatpickr-day.prevMonthDay:nth-child(n+36),\nspan.flatpickr-day.nextMonthDay:nth-child(n+36) {\n  border-bottom: 0;\n}\nspan.flatpickr-day:nth-child(-n+7),\nspan.flatpickr-day.prevMonthDay:nth-child(-n+7),\nspan.flatpickr-day.nextMonthDay:nth-child(-n+7) {\n  margin-top: 0;\n}\nspan.flatpickr-day.today:not(.selected),\nspan.flatpickr-day.prevMonthDay.today:not(.selected),\nspan.flatpickr-day.nextMonthDay.today:not(.selected) {\n  border-color: #e9e9e9;\n  border-right-color: transparent;\n  border-top-color: transparent;\n  border-bottom-color: #f64747;\n}\nspan.flatpickr-day.today:not(.selected):hover,\nspan.flatpickr-day.prevMonthDay.today:not(.selected):hover,\nspan.flatpickr-day.nextMonthDay.today:not(.selected):hover {\n  border: 1px solid #f64747;\n}\nspan.flatpickr-day.startRange,\nspan.flatpickr-day.prevMonthDay.startRange,\nspan.flatpickr-day.nextMonthDay.startRange,\nspan.flatpickr-day.endRange,\nspan.flatpickr-day.prevMonthDay.endRange,\nspan.flatpickr-day.nextMonthDay.endRange {\n  border-color: #4f99ff;\n}\nspan.flatpickr-day.today,\nspan.flatpickr-day.prevMonthDay.today,\nspan.flatpickr-day.nextMonthDay.today,\nspan.flatpickr-day.selected,\nspan.flatpickr-day.prevMonthDay.selected,\nspan.flatpickr-day.nextMonthDay.selected {\n  z-index: 2;\n}\n.rangeMode .flatpickr-day {\n  margin-top: -1px;\n}\n.flatpickr-weekwrapper .flatpickr-weeks {\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.flatpickr-weekwrapper span.flatpickr-day {\n  border: 0;\n  margin: -1px 0 0 -1px;\n}\n.hasWeeks .flatpickr-days {\n  border-right: 0;\n}\n\n\t@media screen and (min-width:0\\0) and (min-resolution: +72dpi) {\n\t\tspan.flatpickr-day {\n\t\t\tdisplay: block;\n\t\t\t-webkit-box-flex: 1;\n\t\t\t-webkit-flex: 1 0 auto;\n\t\t\t    -ms-flex: 1 0 auto;\n\t\t\t        flex: 1 0 auto;\n\t\t}\n\t}\n'],sourceRoot:""}]);const l=i},426:(n,e,t)=>{t.d(e,{Z:()=>C});var a=t(537),r=t.n(a),o=t(645),i=t.n(o),l=t(667),c=t.n(l),d=new URL(t(203),t.b),s=new URL(t(290),t.b),A=new URL(t(12),t.b),p=new URL(t(432),t.b),u=i()(r()),f=c()(d),h=c()(s),m=c()(A),g=c()(p);u.push([n.id,`/*\n  Josh's Custom CSS Reset\n  https://www.joshwcomeau.com/css/custom-css-reset/\n*/\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n* {\n    margin: 0;\n}\nbody {\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n    display: block;\n    max-width: 100%;\n}\ninput,\nbutton,\ntextarea,\nselect {\n    font: inherit;\n}\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    overflow-wrap: break-word;\n}\n#root,\n#__next {\n    isolation: isolate;\n}\n\n/* end reset */\n/* Use a system font for a 'brutalist' look */\n/* General Layout */\n:root {\n    --shadow-color: 0deg 0% 60%;\n    --shadow-elevation-low: 0px -0.5px 0.6px hsl(var(--shadow-color) / 0.38),\n        0px -0.8px 0.9px -1.2px hsl(var(--shadow-color) / 0.38),\n        -0.1px -2.1px 2.4px -2.5px hsl(var(--shadow-color) / 0.38);\n    --shadow-elevation-medium: 0px -0.5px 0.6px hsl(var(--shadow-color) / 0.4),\n        -0.1px -1.7px 1.9px -0.8px hsl(var(--shadow-color) / 0.4),\n        -0.1px -4.3px 4.8px -1.7px hsl(var(--shadow-color) / 0.4),\n        -0.3px -10.5px 11.8px -2.5px hsl(var(--shadow-color) / 0.4);\n    --shadow-elevation-high: 0px -0.5px 0.6px hsl(var(--shadow-color) / 0.37),\n        -0.1px -3.2px 3.6px -0.4px hsl(var(--shadow-color) / 0.37),\n        -0.2px -5.9px 6.6px -0.7px hsl(var(--shadow-color) / 0.37),\n        -0.3px -9.8px 11px -1.1px hsl(var(--shadow-color) / 0.37),\n        -0.5px -15.7px 17.7px -1.4px hsl(var(--shadow-color) / 0.37),\n        -0.8px -24.5px 27.6px -1.8px hsl(var(--shadow-color) / 0.37),\n        -1.2px -37.3px 42px -2.1px hsl(var(--shadow-color) / 0.37),\n        -1.8px -55px 61.9px -2.5px hsl(var(--shadow-color) / 0.37);\n}\n\nhtml {\n    width: 100vw;\n    height: 100vh;\n}\n\nbody {\n    width: 100%;\n    height: 100%;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    line-height: 1.4;\n    background-color: #fff; /* Assuming a white background */\n    color: #000; /* Black color text for high contrast */\n    margin: 0 60px;\n    overflow-x: hidden;\n    display: flex;\n    justify-content: center;\n}\n\n/* Grid Layout */\n.grid-wrap {\n    width: 80vw;\n    height: 1080px;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n    grid-template-areas:\n        'nav tab tab tab tab'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal';\n}\n\n#navbar {\n    width: 260px;\n    grid-area: nav;\n    display: flex;\n}\n\n.to-do.table {\n    grid-area: cal;\n    display: flex;\n    flex-direction: column;\n    width: 1200px;\n    height: 800px;\n}\n\n/* Tabholder and tabs */\n#tabholder {\n    height: 160px;\n    padding-bottom: 32px;\n    grid-area: tab;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n    overflow: visible;\n    z-index: 0;\n    margin-right: 150px;\n}\n\n.tab {\n    min-width: 80px;\n    height: 24px;\n    text-align: center;\n    margin: 0 8px;\n    padding: 0 10px;\n    background-color: white;\n    box-shadow: var(--shadow-elevation-medium);\n    cursor: pointer;\n    /* Flex properties*/\n    flex-basis: 110px;\n    flex-grow: 0;\n    flex-shrink: 1;\n}\n\n.tab > label {\n    cursor: pointer;\n}\n\n.tab input[type='text'] {\n    text-align: center;\n    border: none;\n}\n\n.arrow {\n    order: -1;\n    z-index: 2;\n    position: relative;\n    right: 8px;\n    min-width: 24px;\n    height: 22px;\n    background-image: url(${f});\n    transition: 0.1s ease-in-out;\n}\n\n.arrow:hover {\n    transform: scale(1.1);\n    background-color: lightgrey;\n    box-shadow: 0 0 2px 2px lightgrey;\n}\n\n.arrow:active {\n    transform: scale(0.9);\n    background-color: white;\n    box-shadow: none;\n}\n\n/* Header and Calendar Cell Styling */\n.header-container,\n.to-do-row {\n    display: flex;\n    justify-content: space-between;\n}\n\n.to-do-row {\n    z-index: 0;\n}\n\n.header-container > div,\n.to-do-cell {\n    margin: 0 8px;\n    font-weight: bold;\n    text-align: left;\n    width: 100%;\n}\n\n.to-do-cell {\n    font-weight: normal;\n    padding: 8px 0;\n}\n\n/* Input Fields Styling */\n\ninput[type='text'] {\n    text-align: left;\n}\n\ninput[type='text'],\n.date-picker.flatpickr-input {\n    background: transparent;\n    outline: none;\n    border: none;\n    border-bottom: 1px solid #000; /* Underline for inputs */\n    width: 100%;\n}\n\n.date-picker.flatpickr-input {\n    height: 33.4px; /* Subtract padding from top to equal underline height of other inputs */\n    cursor: grab;\n}\n\n.flatpickr-input.to-do-cell {\n    padding: 8px 0 0;\n    caret-color: transparent;\n}\n\n.date-picker > input,\ninput[type='text'] {\n    cursor: pointer;\n}\n\n/* Priority Box Styling */\ndiv.priority-boxes,\n.priority-boxes {\n    display: flex;\n    justify-content: center;\n    position: relative;\n    padding: 2px 0;\n    width: 120px;\n    gap: 5px;\n    cursor: pointer;\n}\n\n.box {\n    position: relative;\n    top: 5px;\n    width: 14px;\n    height: 14px;\n    border: 2px solid #372ea5;\n    border-radius: 2px;\n    cursor: pointer;\n    transition: background 0.3s ease;\n    z-index: 2;\n}\n\n/* Priority Slider Styling */\n.priority-slider input[type='range'] {\n    width: 100%;\n    background: transparent;\n    position: absolute;\n    height: 4px;\n    z-index: 1;\n    cursor: pointer;\n    appearance: none;\n    background-color: transparent;\n    border: none;\n    opacity: 0;\n    pointer-events: none;\n    border-radius: 2px;\n    outline: none;\n}\n\n/* Checkbox Styling */\n.header-check,\n.complete-task,\ninput[type='checkbox'] {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    width: 24px;\n    max-width: 24px;\n}\n\n.complete-task {\n    max-width: 24px;\n}\n\n.header-check input[type='checkbox'] {\n    opacity: 0.7;\n    pointer-events: none;\n    display: flex;\n    justify-content: center;\n}\n\n.header-check {\n    display: flex;\n    width: 18px;\n    justify-content: center;\n    padding: 3px;\n}\n\n/* New To-Do Button */\n.new-to-do {\n    position: relative;\n    min-width: 24px;\n    width: 24px;\n    height: 24px;\n    top: 9px;\n    right: 20px;\n    visibility: visible;\n    z-index: 1;\n}\n\n.to-do-row > .new-to-do {\n    border: none;\n    color: none;\n    background-color: white;\n    background-image: url(${h});\n    transition: 0.1s ease-in-out;\n}\n\n.to-do-row > .new-to-do:hover {\n    transform: scale(1.1);\n    background-color: lightgrey;\n    box-shadow: 0 0 2px 2px lightgrey;\n}\n\n.to-do-row > .new-to-do:active {\n    transform: scale(0.9);\n    background-color: white;\n    box-shadow: none;\n}\n\n/* Miscellaneous */\n\n/* Collapse structure, hie component */\n.visually-hidden {\n    border-width: 0 !important;\n    clip: rect(1px, 1px, 1px, 1px) !important;\n    height: 1px !important;\n    overflow: hidden !important;\n    padding: 0 !important;\n    position: absolute !important;\n    white-space: nowrap !important;\n    width: 1px !important;\n}\n\n/* Retain structure, hide component */\n.disappear {\n    visibility: hidden;\n}\n\n.active {\n    font-weight: bold;\n    transition: 0.05s ease-in-out;\n    outline: 2px solid silver;\n}\n\n.header-priority {\n    position: relative;\n    left: 14px;\n}\n\n/* Spacer */\n\n.spacer {\n    display: flex;\n    height: 206px;\n    align-items: center;\n}\n\n#spacer-text {\n    text-align: center;\n    margin-top: 1rem;\n    color: #1a1a1a;\n    font-family: 'Times New Roman', Times, serif;\n    font-size: 4rem;\n    font-style: italic;\n}\n\n/* Projects */\n#navbar {\n    flex-direction: column;\n    align-items: center;\n}\n\n.project-container {\n    display: flex;\n    flex-wrap: wrap;\n    width: 172px;\n    margin-right: 40px;\n    margin-left: 20px;\n}\n\n.project {\n    text-align: center;\n    height: 24px;\n    width: 110px;\n    padding: 10;\n    margin: 8px 8px 18px 8px;\n    box-shadow: var(--shadow-elevation-medium);\n}\n\n.arrow-down {\n    z-index: 2;\n    display: flex;\n    position: relative;\n    top: 6px;\n    margin-right: 22px;\n    min-width: 24px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(${m});\n    transition: 0.1s ease-in-out;\n}\n\n.arrow-down:hover {\n    transform: scale(1.1);\n    background-color: lightgrey;\n    box-shadow: 0 0 2px 2px lightgrey;\n}\n\n.arrow-down:active {\n    transform: scale(0.9);\n    background-color: white;\n    box-shadow: none;\n}\n\n/* Max Width Settings */\n.header-priority,\n.priority-slider {\n    max-width: 130px;\n}\n\n.header-due,\n.date-picker {\n    max-width: 150px;\n}\n\n.header-title,\n.title {\n    max-width: 220px;\n}\n\n.header-description,\n.description {\n    min-width: 440px;\n    width: 440px;\n}\n\n.new-to-do.header {\n    max-width: 20px;\n    margin: 0;\n}\n\n.header-timestamp,\n.timestamp {\n    min-width: 180px;\n    max-width: 180px;\n}\n\n.header-delete,\n.delete-todo {\n    max-width: 20px;\n    min-width: 20px;\n    justify-self: start;\n}\n\n.delete-todo {\n    margin-top: 8px;\n    background-image: url(${g});\n    background-repeat: no-repeat;\n}\n\n@keyframes pulse {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.2);\n    }\n}\n\n.delete-todo {\n    color: black; /* Default color is black */\n    transition: color 0.3s ease; /* Transition for the color change */\n}\n\n.delete-todo:hover {\n    animation: pulse 1s infinite; /* Apply the pulse animation on hover */\n    stroke: red;\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["/*\n  Josh's Custom CSS Reset\n  https://www.joshwcomeau.com/css/custom-css-reset/\n*/\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n* {\n    margin: 0;\n}\nbody {\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n    display: block;\n    max-width: 100%;\n}\ninput,\nbutton,\ntextarea,\nselect {\n    font: inherit;\n}\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    overflow-wrap: break-word;\n}\n#root,\n#__next {\n    isolation: isolate;\n}\n\n/* end reset */\n/* Use a system font for a 'brutalist' look */\n/* General Layout */\n:root {\n    --shadow-color: 0deg 0% 60%;\n    --shadow-elevation-low: 0px -0.5px 0.6px hsl(var(--shadow-color) / 0.38),\n        0px -0.8px 0.9px -1.2px hsl(var(--shadow-color) / 0.38),\n        -0.1px -2.1px 2.4px -2.5px hsl(var(--shadow-color) / 0.38);\n    --shadow-elevation-medium: 0px -0.5px 0.6px hsl(var(--shadow-color) / 0.4),\n        -0.1px -1.7px 1.9px -0.8px hsl(var(--shadow-color) / 0.4),\n        -0.1px -4.3px 4.8px -1.7px hsl(var(--shadow-color) / 0.4),\n        -0.3px -10.5px 11.8px -2.5px hsl(var(--shadow-color) / 0.4);\n    --shadow-elevation-high: 0px -0.5px 0.6px hsl(var(--shadow-color) / 0.37),\n        -0.1px -3.2px 3.6px -0.4px hsl(var(--shadow-color) / 0.37),\n        -0.2px -5.9px 6.6px -0.7px hsl(var(--shadow-color) / 0.37),\n        -0.3px -9.8px 11px -1.1px hsl(var(--shadow-color) / 0.37),\n        -0.5px -15.7px 17.7px -1.4px hsl(var(--shadow-color) / 0.37),\n        -0.8px -24.5px 27.6px -1.8px hsl(var(--shadow-color) / 0.37),\n        -1.2px -37.3px 42px -2.1px hsl(var(--shadow-color) / 0.37),\n        -1.8px -55px 61.9px -2.5px hsl(var(--shadow-color) / 0.37);\n}\n\nhtml {\n    width: 100vw;\n    height: 100vh;\n}\n\nbody {\n    width: 100%;\n    height: 100%;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    line-height: 1.4;\n    background-color: #fff; /* Assuming a white background */\n    color: #000; /* Black color text for high contrast */\n    margin: 0 60px;\n    overflow-x: hidden;\n    display: flex;\n    justify-content: center;\n}\n\n/* Grid Layout */\n.grid-wrap {\n    width: 80vw;\n    height: 1080px;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows: repeat(6, 1fr);\n    grid-template-areas:\n        'nav tab tab tab tab'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal'\n        'nav cal cal cal cal';\n}\n\n#navbar {\n    width: 260px;\n    grid-area: nav;\n    display: flex;\n}\n\n.to-do.table {\n    grid-area: cal;\n    display: flex;\n    flex-direction: column;\n    width: 1200px;\n    height: 800px;\n}\n\n/* Tabholder and tabs */\n#tabholder {\n    height: 160px;\n    padding-bottom: 32px;\n    grid-area: tab;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n    overflow: visible;\n    z-index: 0;\n    margin-right: 150px;\n}\n\n.tab {\n    min-width: 80px;\n    height: 24px;\n    text-align: center;\n    margin: 0 8px;\n    padding: 0 10px;\n    background-color: white;\n    box-shadow: var(--shadow-elevation-medium);\n    cursor: pointer;\n    /* Flex properties*/\n    flex-basis: 110px;\n    flex-grow: 0;\n    flex-shrink: 1;\n}\n\n.tab > label {\n    cursor: pointer;\n}\n\n.tab input[type='text'] {\n    text-align: center;\n    border: none;\n}\n\n.arrow {\n    order: -1;\n    z-index: 2;\n    position: relative;\n    right: 8px;\n    min-width: 24px;\n    height: 22px;\n    background-image: url(/node_modules/@tabler/icons/icons/arrow-bar-right.svg);\n    transition: 0.1s ease-in-out;\n}\n\n.arrow:hover {\n    transform: scale(1.1);\n    background-color: lightgrey;\n    box-shadow: 0 0 2px 2px lightgrey;\n}\n\n.arrow:active {\n    transform: scale(0.9);\n    background-color: white;\n    box-shadow: none;\n}\n\n/* Header and Calendar Cell Styling */\n.header-container,\n.to-do-row {\n    display: flex;\n    justify-content: space-between;\n}\n\n.to-do-row {\n    z-index: 0;\n}\n\n.header-container > div,\n.to-do-cell {\n    margin: 0 8px;\n    font-weight: bold;\n    text-align: left;\n    width: 100%;\n}\n\n.to-do-cell {\n    font-weight: normal;\n    padding: 8px 0;\n}\n\n/* Input Fields Styling */\n\ninput[type='text'] {\n    text-align: left;\n}\n\ninput[type='text'],\n.date-picker.flatpickr-input {\n    background: transparent;\n    outline: none;\n    border: none;\n    border-bottom: 1px solid #000; /* Underline for inputs */\n    width: 100%;\n}\n\n.date-picker.flatpickr-input {\n    height: 33.4px; /* Subtract padding from top to equal underline height of other inputs */\n    cursor: grab;\n}\n\n.flatpickr-input.to-do-cell {\n    padding: 8px 0 0;\n    caret-color: transparent;\n}\n\n.date-picker > input,\ninput[type='text'] {\n    cursor: pointer;\n}\n\n/* Priority Box Styling */\ndiv.priority-boxes,\n.priority-boxes {\n    display: flex;\n    justify-content: center;\n    position: relative;\n    padding: 2px 0;\n    width: 120px;\n    gap: 5px;\n    cursor: pointer;\n}\n\n.box {\n    position: relative;\n    top: 5px;\n    width: 14px;\n    height: 14px;\n    border: 2px solid #372ea5;\n    border-radius: 2px;\n    cursor: pointer;\n    transition: background 0.3s ease;\n    z-index: 2;\n}\n\n/* Priority Slider Styling */\n.priority-slider input[type='range'] {\n    width: 100%;\n    background: transparent;\n    position: absolute;\n    height: 4px;\n    z-index: 1;\n    cursor: pointer;\n    appearance: none;\n    background-color: transparent;\n    border: none;\n    opacity: 0;\n    pointer-events: none;\n    border-radius: 2px;\n    outline: none;\n}\n\n/* Checkbox Styling */\n.header-check,\n.complete-task,\ninput[type='checkbox'] {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    width: 24px;\n    max-width: 24px;\n}\n\n.complete-task {\n    max-width: 24px;\n}\n\n.header-check input[type='checkbox'] {\n    opacity: 0.7;\n    pointer-events: none;\n    display: flex;\n    justify-content: center;\n}\n\n.header-check {\n    display: flex;\n    width: 18px;\n    justify-content: center;\n    padding: 3px;\n}\n\n/* New To-Do Button */\n.new-to-do {\n    position: relative;\n    min-width: 24px;\n    width: 24px;\n    height: 24px;\n    top: 9px;\n    right: 20px;\n    visibility: visible;\n    z-index: 1;\n}\n\n.to-do-row > .new-to-do {\n    border: none;\n    color: none;\n    background-color: white;\n    background-image: url(/node_modules/@tabler/icons/icons/text-plus.svg);\n    transition: 0.1s ease-in-out;\n}\n\n.to-do-row > .new-to-do:hover {\n    transform: scale(1.1);\n    background-color: lightgrey;\n    box-shadow: 0 0 2px 2px lightgrey;\n}\n\n.to-do-row > .new-to-do:active {\n    transform: scale(0.9);\n    background-color: white;\n    box-shadow: none;\n}\n\n/* Miscellaneous */\n\n/* Collapse structure, hie component */\n.visually-hidden {\n    border-width: 0 !important;\n    clip: rect(1px, 1px, 1px, 1px) !important;\n    height: 1px !important;\n    overflow: hidden !important;\n    padding: 0 !important;\n    position: absolute !important;\n    white-space: nowrap !important;\n    width: 1px !important;\n}\n\n/* Retain structure, hide component */\n.disappear {\n    visibility: hidden;\n}\n\n.active {\n    font-weight: bold;\n    transition: 0.05s ease-in-out;\n    outline: 2px solid silver;\n}\n\n.header-priority {\n    position: relative;\n    left: 14px;\n}\n\n/* Spacer */\n\n.spacer {\n    display: flex;\n    height: 206px;\n    align-items: center;\n}\n\n#spacer-text {\n    text-align: center;\n    margin-top: 1rem;\n    color: #1a1a1a;\n    font-family: 'Times New Roman', Times, serif;\n    font-size: 4rem;\n    font-style: italic;\n}\n\n/* Projects */\n#navbar {\n    flex-direction: column;\n    align-items: center;\n}\n\n.project-container {\n    display: flex;\n    flex-wrap: wrap;\n    width: 172px;\n    margin-right: 40px;\n    margin-left: 20px;\n}\n\n.project {\n    text-align: center;\n    height: 24px;\n    width: 110px;\n    padding: 10;\n    margin: 8px 8px 18px 8px;\n    box-shadow: var(--shadow-elevation-medium);\n}\n\n.arrow-down {\n    z-index: 2;\n    display: flex;\n    position: relative;\n    top: 6px;\n    margin-right: 22px;\n    min-width: 24px;\n    height: 24px;\n    background-repeat: no-repeat;\n    background-image: url(/node_modules/@tabler/icons/icons/arrow-bar-down.svg);\n    transition: 0.1s ease-in-out;\n}\n\n.arrow-down:hover {\n    transform: scale(1.1);\n    background-color: lightgrey;\n    box-shadow: 0 0 2px 2px lightgrey;\n}\n\n.arrow-down:active {\n    transform: scale(0.9);\n    background-color: white;\n    box-shadow: none;\n}\n\n/* Max Width Settings */\n.header-priority,\n.priority-slider {\n    max-width: 130px;\n}\n\n.header-due,\n.date-picker {\n    max-width: 150px;\n}\n\n.header-title,\n.title {\n    max-width: 220px;\n}\n\n.header-description,\n.description {\n    min-width: 440px;\n    width: 440px;\n}\n\n.new-to-do.header {\n    max-width: 20px;\n    margin: 0;\n}\n\n.header-timestamp,\n.timestamp {\n    min-width: 180px;\n    max-width: 180px;\n}\n\n.header-delete,\n.delete-todo {\n    max-width: 20px;\n    min-width: 20px;\n    justify-self: start;\n}\n\n.delete-todo {\n    margin-top: 8px;\n    background-image: url(/node_modules/@tabler/icons/icons/bomb-filled.svg);\n    background-repeat: no-repeat;\n}\n\n@keyframes pulse {\n    0%,\n    100% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.2);\n    }\n}\n\n.delete-todo {\n    color: black; /* Default color is black */\n    transition: color 0.3s ease; /* Transition for the color change */\n}\n\n.delete-todo:hover {\n    animation: pulse 1s infinite; /* Apply the pulse animation on hover */\n    stroke: red;\n}\n"],sourceRoot:""}]);const C=u},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var s=[].concat(n[d]);a&&i[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),e.push(s))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},895:()=>{"function"!=typeof Object.assign&&(Object.assign=function(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];if(!n)throw TypeError("Cannot convert undefined or null to object");for(var a=function(e){e&&Object.keys(e).forEach((function(t){return n[t]=e[t]}))},r=0,o=e;r<o.length;r++)a(o[r]);return n})},114:(n,e,t)=>{t.r(e),t.d(e,{default:()=>g});var a=t(379),r=t.n(a),o=t(795),i=t.n(o),l=t(569),c=t.n(l),d=t(565),s=t.n(d),A=t(216),p=t.n(A),u=t(589),f=t.n(u),h=t(709),m={};m.styleTagTransform=f(),m.setAttributes=s(),m.insert=c().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=p(),r()(h.Z,m);const g=h.Z&&h.Z.locals?h.Z.locals:void 0},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var o={},i=[],l=0;l<n.length;l++){var c=n[l],d=a.base?c[0]+a.base:c[0],s=o[d]||0,A="".concat(d," ").concat(s);o[d]=s+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,a);a.byIndex=l,e.splice(l,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=a(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var l=t(o[i]);e[l].references--}for(var c=a(n,r),d=0;d<o.length;d++){var s=t(o[d]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},548:(n,e,t)=>{var a=t(379),r=t.n(a),o=t(795),i=t.n(o),l=t(569),c=t.n(l),d=t(565),s=t.n(d),A=t(216),p=t.n(A),u=t(589),f=t.n(u),h=t(426),m={};m.styleTagTransform=f(),m.setAttributes=s(),m.insert=c().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=p(),r()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const g=function(n,e){void 0===e&&(e=!1),this.id=n,this.isActive=e,this.tabs=[]},C=function(n,e,t){void 0===e&&(e=!1),void 0===t&&(t=!1),this.id=n,this.isActive=e,this.isDisplayed=t,this.toDos=[]},b=function(n,e){void 0===e&&(e=!1),this.id=n,this.isDisplayed=e};function v(n){var e=document.querySelector(n);e?e.classList.add("disappear"):console.error("Element with selector ".concat(n," not found."))}function x(){return Date.now()}const B=function(){function n(n,e,t){var a=this;this.step=function(){var n=x()-a.expected;n>a.interval&&a.errorFunction(),a.workFunction(),a.expected+=a.interval,a.timeout=setTimeout(a.step.bind(a),Math.max(0,a.interval-n))},this.workFunction=n,this.interval=e,this.errorFunction=t,this.expected=void 0,this.timeout=void 0}return n.prototype.start=function(){this.expected=x()+this.interval,this.timeout=setTimeout(this.step,this.interval)},n.prototype.stop=function(){clearTimeout(this.timeout)},n}();var k={};function w(){return k}function y(n){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},y(n)}function E(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function D(n){E(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===y(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function I(n,e){E(2,arguments);var t=D(n),a=D(e),r=t.getTime()-a.getTime();return r<0?-1:r>0?1:r}function M(n,e){E(2,arguments);var t,a=D(n),r=D(e),o=I(a,r),i=Math.abs(function(n,e){E(2,arguments);var t=D(n),a=D(e);return 12*(t.getFullYear()-a.getFullYear())+(t.getMonth()-a.getMonth())}(a,r));if(i<1)t=0;else{1===a.getMonth()&&a.getDate()>27&&a.setDate(30),a.setMonth(a.getMonth()-o*i);var l=I(a,r)===-o;(function(n){E(1,arguments);var e=D(n);return function(n){E(1,arguments);var e=D(n);return e.setHours(23,59,59,999),e}(e).getTime()===function(n){E(1,arguments);var e=D(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}(e).getTime()})(D(n))&&1===i&&1===I(n,r)&&(l=!1),t=o*(i-Number(l))}return 0===t?0:t}var T={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}},S="trunc";var j={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const W={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var U={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function P(n){return function(e,t){var a;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,o=null!=t&&t.width?String(t.width):r;a=n.formattingValues[o]||n.formattingValues[r]}else{var i=n.defaultWidth,l=null!=t&&t.width?String(t.width):n.defaultWidth;a=n.values[l]||n.values[i]}return a[n.argumentCallback?n.argumentCallback(e):e]}}const R={ordinalNumber:function(n,e){var t=Number(n),a=t%100;if(a>20||a<10)switch(a%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:P({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:P({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:P({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:P({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:P({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function q(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.width,r=a&&n.matchPatterns[a]||n.matchPatterns[n.defaultMatchWidth],o=e.match(r);if(!o)return null;var i,l=o[0],c=a&&n.parsePatterns[a]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(l))return t}(c):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(l))return t}(c);return i=n.valueCallback?n.valueCallback(d):d,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(l.length)}}}var O,F={ordinalNumber:(O={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(O.matchPattern);if(!t)return null;var a=t[0],r=n.match(O.parsePattern);if(!r)return null;var o=O.valueCallback?O.valueCallback(r[0]):r[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:n.slice(a.length)}}),era:q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const N={code:"en-US",formatDistance:function(n,e,t){var a,r=j[n];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+a:a+" ago":a},formatLong:W,formatRelative:function(n,e,t,a){return U[n]},localize:R,match:F,options:{weekStartsOn:0,firstWeekContainsDate:1}};function z(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}function _(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var H=43200;function L(n,e,t){var a,r;E(2,arguments);var o=w(),i=null!==(a=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:o.locale)&&void 0!==a?a:N;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var l=I(n,e);if(isNaN(l))throw new RangeError("Invalid time value");var c,d,s=z(z({},t),{addSuffix:Boolean(null==t?void 0:t.addSuffix),comparison:l});l>0?(c=D(e),d=D(n)):(c=D(n),d=D(e));var A,p=function(n,e,t){E(2,arguments);var a,r=function(n,e){return E(2,arguments),D(n).getTime()-D(e).getTime()}(n,e)/1e3;return((a=null==t?void 0:t.roundingMethod)?T[a]:T[S])(r)}(d,c),u=(_(d)-_(c))/1e3,f=Math.round((p-u)/60);if(f<2)return null!=t&&t.includeSeconds?p<5?i.formatDistance("lessThanXSeconds",5,s):p<10?i.formatDistance("lessThanXSeconds",10,s):p<20?i.formatDistance("lessThanXSeconds",20,s):p<40?i.formatDistance("halfAMinute",0,s):p<60?i.formatDistance("lessThanXMinutes",1,s):i.formatDistance("xMinutes",1,s):0===f?i.formatDistance("lessThanXMinutes",1,s):i.formatDistance("xMinutes",f,s);if(f<45)return i.formatDistance("xMinutes",f,s);if(f<90)return i.formatDistance("aboutXHours",1,s);if(f<1440){var h=Math.round(f/60);return i.formatDistance("aboutXHours",h,s)}if(f<2520)return i.formatDistance("xDays",1,s);if(f<H){var m=Math.round(f/1440);return i.formatDistance("xDays",m,s)}if(f<86400)return A=Math.round(f/H),i.formatDistance("aboutXMonths",A,s);if((A=M(d,c))<12){var g=Math.round(f/H);return i.formatDistance("xMonths",g,s)}var C=A%12,b=Math.floor(A/12);return C<3?i.formatDistance("aboutXYears",b,s):C<9?i.formatDistance("overXYears",b,s):i.formatDistance("almostXYears",b+1,s)}function X(n,e){n.textContent=e}const Z=function(){function n(n,e){this.timer=new B((function(){!function(n,e){var t="in ".concat(L(n,x()));"in less than a minute"==t&&(t="now"),X(e,t)}(n,e)}),1e3,(function(){console.log("Error")}))}return n.prototype.startTimerCountdown=function(){this.timer.start()},n.prototype.stopTimerCountdown=function(){this.timer.stop()},n}();var G=function(){function n(){this.countdown=null}return n.prototype.setCountdown=function(n,e){this.countdown&&this.countdown.stopTimerCountdown(),this.countdown=new Z(n,e)},n.prototype.start=function(){this.countdown&&this.countdown.startTimerCountdown()},n.prototype.stop=function(){this.countdown&&this.countdown.stopTimerCountdown()},n}(),V=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],Q={_disable:[],allowInput:!1,allowInvalidPreload:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",autoFillDefaultTime:!0,clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enableSeconds:!1,enableTime:!1,errorHandler:function(n){return"undefined"!=typeof console&&console.warn(n)},getWeek:function(n){var e=new Date(n.getTime());e.setHours(0,0,0,0),e.setDate(e.getDate()+3-(e.getDay()+6)%7);var t=new Date(e.getFullYear(),0,4);return 1+Math.round(((e.getTime()-t.getTime())/864e5-3+(t.getDay()+6)%7)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",monthSelectorType:"dropdown",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},J={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(n){var e=n%100;if(e>3&&e<21)return"th";switch(e%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year",monthAriaLabel:"Month",hourAriaLabel:"Hour",minuteAriaLabel:"Minute",time_24hr:!1};const K=J;var $=function(n,e){return void 0===e&&(e=2),("000"+n).slice(-1*e)},nn=function(n){return!0===n?1:0};function en(n,e){var t;return function(){var a=this,r=arguments;clearTimeout(t),t=setTimeout((function(){return n.apply(a,r)}),e)}}var tn=function(n){return n instanceof Array?n:[n]};function an(n,e,t){if(!0===t)return n.classList.add(e);n.classList.remove(e)}function rn(n,e,t){var a=window.document.createElement(n);return e=e||"",t=t||"",a.className=e,void 0!==t&&(a.textContent=t),a}function on(n){for(;n.firstChild;)n.removeChild(n.firstChild)}function ln(n,e){return e(n)?n:n.parentNode?ln(n.parentNode,e):void 0}function cn(n,e){var t=rn("div","numInputWrapper"),a=rn("input","numInput "+n),r=rn("span","arrowUp"),o=rn("span","arrowDown");if(-1===navigator.userAgent.indexOf("MSIE 9.0")?a.type="number":(a.type="text",a.pattern="\\d*"),void 0!==e)for(var i in e)a.setAttribute(i,e[i]);return t.appendChild(a),t.appendChild(r),t.appendChild(o),t}function dn(n){try{return"function"==typeof n.composedPath?n.composedPath()[0]:n.target}catch(e){return n.target}}var sn=function(){},An=function(n,e,t){return t.months[e?"shorthand":"longhand"][n]},pn={D:sn,F:function(n,e,t){n.setMonth(t.months.longhand.indexOf(e))},G:function(n,e){n.setHours((n.getHours()>=12?12:0)+parseFloat(e))},H:function(n,e){n.setHours(parseFloat(e))},J:function(n,e){n.setDate(parseFloat(e))},K:function(n,e,t){n.setHours(n.getHours()%12+12*nn(new RegExp(t.amPM[1],"i").test(e)))},M:function(n,e,t){n.setMonth(t.months.shorthand.indexOf(e))},S:function(n,e){n.setSeconds(parseFloat(e))},U:function(n,e){return new Date(1e3*parseFloat(e))},W:function(n,e,t){var a=parseInt(e),r=new Date(n.getFullYear(),0,2+7*(a-1),0,0,0,0);return r.setDate(r.getDate()-r.getDay()+t.firstDayOfWeek),r},Y:function(n,e){n.setFullYear(parseFloat(e))},Z:function(n,e){return new Date(e)},d:function(n,e){n.setDate(parseFloat(e))},h:function(n,e){n.setHours((n.getHours()>=12?12:0)+parseFloat(e))},i:function(n,e){n.setMinutes(parseFloat(e))},j:function(n,e){n.setDate(parseFloat(e))},l:sn,m:function(n,e){n.setMonth(parseFloat(e)-1)},n:function(n,e){n.setMonth(parseFloat(e)-1)},s:function(n,e){n.setSeconds(parseFloat(e))},u:function(n,e){return new Date(parseFloat(e))},w:sn,y:function(n,e){n.setFullYear(2e3+parseFloat(e))}},un={D:"",F:"",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",u:"(.+)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},fn={Z:function(n){return n.toISOString()},D:function(n,e,t){return e.weekdays.shorthand[fn.w(n,e,t)]},F:function(n,e,t){return An(fn.n(n,e,t)-1,!1,e)},G:function(n,e,t){return $(fn.h(n,e,t))},H:function(n){return $(n.getHours())},J:function(n,e){return void 0!==e.ordinal?n.getDate()+e.ordinal(n.getDate()):n.getDate()},K:function(n,e){return e.amPM[nn(n.getHours()>11)]},M:function(n,e){return An(n.getMonth(),!0,e)},S:function(n){return $(n.getSeconds())},U:function(n){return n.getTime()/1e3},W:function(n,e,t){return t.getWeek(n)},Y:function(n){return $(n.getFullYear(),4)},d:function(n){return $(n.getDate())},h:function(n){return n.getHours()%12?n.getHours()%12:12},i:function(n){return $(n.getMinutes())},j:function(n){return n.getDate()},l:function(n,e){return e.weekdays.longhand[n.getDay()]},m:function(n){return $(n.getMonth()+1)},n:function(n){return n.getMonth()+1},s:function(n){return n.getSeconds()},u:function(n){return n.getTime()},w:function(n){return n.getDay()},y:function(n){return String(n.getFullYear()).substring(2)}},hn=function(n){var e=n.config,t=void 0===e?Q:e,a=n.l10n,r=void 0===a?J:a,o=n.isMobile,i=void 0!==o&&o;return function(n,e,a){var o=a||r;return void 0===t.formatDate||i?e.split("").map((function(e,a,r){return fn[e]&&"\\"!==r[a-1]?fn[e](n,o,t):"\\"!==e?e:""})).join(""):t.formatDate(n,e,o)}},mn=function(n){var e=n.config,t=void 0===e?Q:e,a=n.l10n,r=void 0===a?J:a;return function(n,e,a,o){if(0===n||n){var i,l=o||r,c=n;if(n instanceof Date)i=new Date(n.getTime());else if("string"!=typeof n&&void 0!==n.toFixed)i=new Date(n);else if("string"==typeof n){var d=e||(t||Q).dateFormat,s=String(n).trim();if("today"===s)i=new Date,a=!0;else if(t&&t.parseDate)i=t.parseDate(n,d);else if(/Z$/.test(s)||/GMT$/.test(s))i=new Date(n);else{for(var A=void 0,p=[],u=0,f=0,h="";u<d.length;u++){var m=d[u],g="\\"===m,C="\\"===d[u-1]||g;if(un[m]&&!C){h+=un[m];var b=new RegExp(h).exec(n);b&&(A=!0)&&p["Y"!==m?"push":"unshift"]({fn:pn[m],val:b[++f]})}else g||(h+=".")}i=t&&t.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0),p.forEach((function(n){var e=n.fn,t=n.val;return i=e(i,t,l)||i})),i=A?i:void 0}}if(i instanceof Date&&!isNaN(i.getTime()))return!0===a&&i.setHours(0,0,0,0),i;t.errorHandler(new Error("Invalid date provided: "+c))}}};function gn(n,e,t){return void 0===t&&(t=!0),!1!==t?new Date(n.getTime()).setHours(0,0,0,0)-new Date(e.getTime()).setHours(0,0,0,0):n.getTime()-e.getTime()}var Cn=function(n,e,t){return n>Math.min(e,t)&&n<Math.max(e,t)},bn=function(n,e,t){return 3600*n+60*e+t},vn=function(n){var e=Math.floor(n/3600),t=(n-3600*e)/60;return[e,t,n-3600*e-60*t]},xn={DAY:864e5};function Bn(n){var e=n.defaultHour,t=n.defaultMinute,a=n.defaultSeconds;if(void 0!==n.minDate){var r=n.minDate.getHours(),o=n.minDate.getMinutes(),i=n.minDate.getSeconds();e<r&&(e=r),e===r&&t<o&&(t=o),e===r&&t===o&&a<i&&(a=n.minDate.getSeconds())}if(void 0!==n.maxDate){var l=n.maxDate.getHours(),c=n.maxDate.getMinutes();(e=Math.min(e,l))===l&&(t=Math.min(c,t)),e===l&&t===c&&(a=n.maxDate.getSeconds())}return{hours:e,minutes:t,seconds:a}}t(895);var kn=function(){return kn=Object.assign||function(n){for(var e,t=1,a=arguments.length;t<a;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},kn.apply(this,arguments)},wn=function(){for(var n=0,e=0,t=arguments.length;e<t;e++)n+=arguments[e].length;var a=Array(n),r=0;for(e=0;e<t;e++)for(var o=arguments[e],i=0,l=o.length;i<l;i++,r++)a[r]=o[i];return a},yn=300;function En(n,e){var t={config:kn(kn({},Q),In.defaultConfig),l10n:K};function a(){var n;return(null===(n=t.calendarContainer)||void 0===n?void 0:n.getRootNode()).activeElement||document.activeElement}function r(n){return n.bind(t)}function o(){var n=t.config;!1===n.weekNumbers&&1===n.showMonths||!0!==n.noCalendar&&window.requestAnimationFrame((function(){if(void 0!==t.calendarContainer&&(t.calendarContainer.style.visibility="hidden",t.calendarContainer.style.display="block"),void 0!==t.daysContainer){var e=(t.days.offsetWidth+1)*n.showMonths;t.daysContainer.style.width=e+"px",t.calendarContainer.style.width=e+(void 0!==t.weekWrapper?t.weekWrapper.offsetWidth:0)+"px",t.calendarContainer.style.removeProperty("visibility"),t.calendarContainer.style.removeProperty("display")}}))}function i(n){if(0===t.selectedDates.length){var e=void 0===t.config.minDate||gn(new Date,t.config.minDate)>=0?new Date:new Date(t.config.minDate.getTime()),a=Bn(t.config);e.setHours(a.hours,a.minutes,a.seconds,e.getMilliseconds()),t.selectedDates=[e],t.latestSelectedDateObj=e}void 0!==n&&"blur"!==n.type&&function(n){n.preventDefault();var e="keydown"===n.type,a=dn(n),r=a;void 0!==t.amPM&&a===t.amPM&&(t.amPM.textContent=t.l10n.amPM[nn(t.amPM.textContent===t.l10n.amPM[0])]);var o=parseFloat(r.getAttribute("min")),i=parseFloat(r.getAttribute("max")),l=parseFloat(r.getAttribute("step")),c=parseInt(r.value,10),d=c+l*(n.delta||(e?38===n.which?1:-1:0));if(void 0!==r.value&&2===r.value.length){var s=r===t.hourElement,A=r===t.minuteElement;d<o?(d=i+d+nn(!s)+(nn(s)&&nn(!t.amPM)),A&&h(void 0,-1,t.hourElement)):d>i&&(d=r===t.hourElement?d-i-nn(!t.amPM):o,A&&h(void 0,1,t.hourElement)),t.amPM&&s&&(1===l?d+c===23:Math.abs(d-c)>l)&&(t.amPM.textContent=t.l10n.amPM[nn(t.amPM.textContent===t.l10n.amPM[0])]),r.value=$(d)}}(n);var r=t._input.value;l(),En(),t._input.value!==r&&t._debouncedChange()}function l(){if(void 0!==t.hourElement&&void 0!==t.minuteElement){var n,e,a=(parseInt(t.hourElement.value.slice(-2),10)||0)%24,r=(parseInt(t.minuteElement.value,10)||0)%60,o=void 0!==t.secondElement?(parseInt(t.secondElement.value,10)||0)%60:0;void 0!==t.amPM&&(n=a,e=t.amPM.textContent,a=n%12+12*nn(e===t.l10n.amPM[1]));var i=void 0!==t.config.minTime||t.config.minDate&&t.minDateHasTime&&t.latestSelectedDateObj&&0===gn(t.latestSelectedDateObj,t.config.minDate,!0),l=void 0!==t.config.maxTime||t.config.maxDate&&t.maxDateHasTime&&t.latestSelectedDateObj&&0===gn(t.latestSelectedDateObj,t.config.maxDate,!0);if(void 0!==t.config.maxTime&&void 0!==t.config.minTime&&t.config.minTime>t.config.maxTime){var c=bn(t.config.minTime.getHours(),t.config.minTime.getMinutes(),t.config.minTime.getSeconds()),s=bn(t.config.maxTime.getHours(),t.config.maxTime.getMinutes(),t.config.maxTime.getSeconds()),A=bn(a,r,o);if(A>s&&A<c){var p=vn(c);a=p[0],r=p[1],o=p[2]}}else{if(l){var u=void 0!==t.config.maxTime?t.config.maxTime:t.config.maxDate;(a=Math.min(a,u.getHours()))===u.getHours()&&(r=Math.min(r,u.getMinutes())),r===u.getMinutes()&&(o=Math.min(o,u.getSeconds()))}if(i){var f=void 0!==t.config.minTime?t.config.minTime:t.config.minDate;(a=Math.max(a,f.getHours()))===f.getHours()&&r<f.getMinutes()&&(r=f.getMinutes()),r===f.getMinutes()&&(o=Math.max(o,f.getSeconds()))}}d(a,r,o)}}function c(n){var e=n||t.latestSelectedDateObj;e&&e instanceof Date&&d(e.getHours(),e.getMinutes(),e.getSeconds())}function d(n,e,a){void 0!==t.latestSelectedDateObj&&t.latestSelectedDateObj.setHours(n%24,e,a||0,0),t.hourElement&&t.minuteElement&&!t.isMobile&&(t.hourElement.value=$(t.config.time_24hr?n:(12+n)%12+12*nn(n%12==0)),t.minuteElement.value=$(e),void 0!==t.amPM&&(t.amPM.textContent=t.l10n.amPM[nn(n>=12)]),void 0!==t.secondElement&&(t.secondElement.value=$(a)))}function s(n){var e=dn(n),t=parseInt(e.value)+(n.delta||0);(t/1e3>1||"Enter"===n.key&&!/[^\d]/.test(t.toString()))&&T(t)}function A(n,e,a,r){return e instanceof Array?e.forEach((function(e){return A(n,e,a,r)})):n instanceof Array?n.forEach((function(n){return A(n,e,a,r)})):(n.addEventListener(e,a,r),void t._handlers.push({remove:function(){return n.removeEventListener(e,a,r)}}))}function p(){G("onChange")}function u(n,e){var a=void 0!==n?t.parseDate(n):t.latestSelectedDateObj||(t.config.minDate&&t.config.minDate>t.now?t.config.minDate:t.config.maxDate&&t.config.maxDate<t.now?t.config.maxDate:t.now),r=t.currentYear,o=t.currentMonth;try{void 0!==a&&(t.currentYear=a.getFullYear(),t.currentMonth=a.getMonth())}catch(n){n.message="Invalid date supplied: "+a,t.config.errorHandler(n)}e&&t.currentYear!==r&&(G("onYearChange"),B()),!e||t.currentYear===r&&t.currentMonth===o||G("onMonthChange"),t.redraw()}function f(n){var e=dn(n);~e.className.indexOf("arrow")&&h(n,e.classList.contains("arrowUp")?1:-1)}function h(n,e,t){var a=n&&dn(n),r=t||a&&a.parentNode&&a.parentNode.firstChild,o=J("increment");o.delta=e,r&&r.dispatchEvent(o)}function m(n,e,a,r){var o=S(e,!0),i=rn("span",n,e.getDate().toString());return i.dateObj=e,i.$i=r,i.setAttribute("aria-label",t.formatDate(e,t.config.ariaDateFormat)),-1===n.indexOf("hidden")&&0===gn(e,t.now)&&(t.todayDateElem=i,i.classList.add("today"),i.setAttribute("aria-current","date")),o?(i.tabIndex=-1,sn(e)&&(i.classList.add("selected"),t.selectedDateElem=i,"range"===t.config.mode&&(an(i,"startRange",t.selectedDates[0]&&0===gn(e,t.selectedDates[0],!0)),an(i,"endRange",t.selectedDates[1]&&0===gn(e,t.selectedDates[1],!0)),"nextMonthDay"===n&&i.classList.add("inRange")))):i.classList.add("flatpickr-disabled"),"range"===t.config.mode&&function(n){return!("range"!==t.config.mode||t.selectedDates.length<2)&&gn(n,t.selectedDates[0])>=0&&gn(n,t.selectedDates[1])<=0}(e)&&!sn(e)&&i.classList.add("inRange"),t.weekNumbers&&1===t.config.showMonths&&"prevMonthDay"!==n&&r%7==6&&t.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+t.config.getWeek(e)+"</span>"),G("onDayCreate",i),i}function g(n){n.focus(),"range"===t.config.mode&&U(n)}function C(n){for(var e=n>0?0:t.config.showMonths-1,a=n>0?t.config.showMonths:-1,r=e;r!=a;r+=n)for(var o=t.daysContainer.children[r],i=n>0?0:o.children.length-1,l=n>0?o.children.length:-1,c=i;c!=l;c+=n){var d=o.children[c];if(-1===d.className.indexOf("hidden")&&S(d.dateObj))return d}}function b(n,e){var r=a(),o=j(r||document.body),i=void 0!==n?n:o?r:void 0!==t.selectedDateElem&&j(t.selectedDateElem)?t.selectedDateElem:void 0!==t.todayDateElem&&j(t.todayDateElem)?t.todayDateElem:C(e>0?1:-1);void 0===i?t._input.focus():o?function(n,e){for(var a=-1===n.className.indexOf("Month")?n.dateObj.getMonth():t.currentMonth,r=e>0?t.config.showMonths:-1,o=e>0?1:-1,i=a-t.currentMonth;i!=r;i+=o)for(var l=t.daysContainer.children[i],c=a-t.currentMonth===i?n.$i+e:e<0?l.children.length-1:0,d=l.children.length,s=c;s>=0&&s<d&&s!=(e>0?d:-1);s+=o){var A=l.children[s];if(-1===A.className.indexOf("hidden")&&S(A.dateObj)&&Math.abs(n.$i-s)>=Math.abs(e))return g(A)}t.changeMonth(o),b(C(o),0)}(i,e):g(i)}function v(n,e){for(var a=(new Date(n,e,1).getDay()-t.l10n.firstDayOfWeek+7)%7,r=t.utils.getDaysInMonth((e-1+12)%12,n),o=t.utils.getDaysInMonth(e,n),i=window.document.createDocumentFragment(),l=t.config.showMonths>1,c=l?"prevMonthDay hidden":"prevMonthDay",d=l?"nextMonthDay hidden":"nextMonthDay",s=r+1-a,A=0;s<=r;s++,A++)i.appendChild(m("flatpickr-day "+c,new Date(n,e-1,s),0,A));for(s=1;s<=o;s++,A++)i.appendChild(m("flatpickr-day",new Date(n,e,s),0,A));for(var p=o+1;p<=42-a&&(1===t.config.showMonths||A%7!=0);p++,A++)i.appendChild(m("flatpickr-day "+d,new Date(n,e+1,p%o),0,A));var u=rn("div","dayContainer");return u.appendChild(i),u}function x(){if(void 0!==t.daysContainer){on(t.daysContainer),t.weekNumbers&&on(t.weekNumbers);for(var n=document.createDocumentFragment(),e=0;e<t.config.showMonths;e++){var a=new Date(t.currentYear,t.currentMonth,1);a.setMonth(t.currentMonth+e),n.appendChild(v(a.getFullYear(),a.getMonth()))}t.daysContainer.appendChild(n),t.days=t.daysContainer.firstChild,"range"===t.config.mode&&1===t.selectedDates.length&&U()}}function B(){if(!(t.config.showMonths>1||"dropdown"!==t.config.monthSelectorType)){var n=function(n){return!(void 0!==t.config.minDate&&t.currentYear===t.config.minDate.getFullYear()&&n<t.config.minDate.getMonth()||void 0!==t.config.maxDate&&t.currentYear===t.config.maxDate.getFullYear()&&n>t.config.maxDate.getMonth())};t.monthsDropdownContainer.tabIndex=-1,t.monthsDropdownContainer.innerHTML="";for(var e=0;e<12;e++)if(n(e)){var a=rn("option","flatpickr-monthDropdown-month");a.value=new Date(t.currentYear,e).getMonth().toString(),a.textContent=An(e,t.config.shorthandCurrentMonth,t.l10n),a.tabIndex=-1,t.currentMonth===e&&(a.selected=!0),t.monthsDropdownContainer.appendChild(a)}}}function k(){var n,e=rn("div","flatpickr-month"),a=window.document.createDocumentFragment();t.config.showMonths>1||"static"===t.config.monthSelectorType?n=rn("span","cur-month"):(t.monthsDropdownContainer=rn("select","flatpickr-monthDropdown-months"),t.monthsDropdownContainer.setAttribute("aria-label",t.l10n.monthAriaLabel),A(t.monthsDropdownContainer,"change",(function(n){var e=dn(n),a=parseInt(e.value,10);t.changeMonth(a-t.currentMonth),G("onMonthChange")})),B(),n=t.monthsDropdownContainer);var r=cn("cur-year",{tabindex:"-1"}),o=r.getElementsByTagName("input")[0];o.setAttribute("aria-label",t.l10n.yearAriaLabel),t.config.minDate&&o.setAttribute("min",t.config.minDate.getFullYear().toString()),t.config.maxDate&&(o.setAttribute("max",t.config.maxDate.getFullYear().toString()),o.disabled=!!t.config.minDate&&t.config.minDate.getFullYear()===t.config.maxDate.getFullYear());var i=rn("div","flatpickr-current-month");return i.appendChild(n),i.appendChild(r),a.appendChild(i),e.appendChild(a),{container:e,yearElement:o,monthElement:n}}function w(){on(t.monthNav),t.monthNav.appendChild(t.prevMonthNav),t.config.showMonths&&(t.yearElements=[],t.monthElements=[]);for(var n=t.config.showMonths;n--;){var e=k();t.yearElements.push(e.yearElement),t.monthElements.push(e.monthElement),t.monthNav.appendChild(e.container)}t.monthNav.appendChild(t.nextMonthNav)}function y(){t.weekdayContainer?on(t.weekdayContainer):t.weekdayContainer=rn("div","flatpickr-weekdays");for(var n=t.config.showMonths;n--;){var e=rn("div","flatpickr-weekdaycontainer");t.weekdayContainer.appendChild(e)}return E(),t.weekdayContainer}function E(){if(t.weekdayContainer){var n=t.l10n.firstDayOfWeek,e=wn(t.l10n.weekdays.shorthand);n>0&&n<e.length&&(e=wn(e.splice(n,e.length),e.splice(0,n)));for(var a=t.config.showMonths;a--;)t.weekdayContainer.children[a].innerHTML="\n      <span class='flatpickr-weekday'>\n        "+e.join("</span><span class='flatpickr-weekday'>")+"\n      </span>\n      "}}function D(n,e){void 0===e&&(e=!0);var a=e?n:n-t.currentMonth;a<0&&!0===t._hidePrevMonthArrow||a>0&&!0===t._hideNextMonthArrow||(t.currentMonth+=a,(t.currentMonth<0||t.currentMonth>11)&&(t.currentYear+=t.currentMonth>11?1:-1,t.currentMonth=(t.currentMonth+12)%12,G("onYearChange"),B()),x(),G("onMonthChange"),pn())}function I(n){return t.calendarContainer.contains(n)}function M(n){if(t.isOpen&&!t.config.inline){var e=dn(n),a=I(e),r=!(e===t.input||e===t.altInput||t.element.contains(e)||n.path&&n.path.indexOf&&(~n.path.indexOf(t.input)||~n.path.indexOf(t.altInput))||a||I(n.relatedTarget)),o=!t.config.ignoredFocusElements.some((function(n){return n.contains(e)}));r&&o&&(t.config.allowInput&&t.setDate(t._input.value,!1,t.config.altInput?t.config.altFormat:t.config.dateFormat),void 0!==t.timeContainer&&void 0!==t.minuteElement&&void 0!==t.hourElement&&""!==t.input.value&&void 0!==t.input.value&&i(),t.close(),t.config&&"range"===t.config.mode&&1===t.selectedDates.length&&t.clear(!1))}}function T(n){if(!(!n||t.config.minDate&&n<t.config.minDate.getFullYear()||t.config.maxDate&&n>t.config.maxDate.getFullYear())){var e=n,a=t.currentYear!==e;t.currentYear=e||t.currentYear,t.config.maxDate&&t.currentYear===t.config.maxDate.getFullYear()?t.currentMonth=Math.min(t.config.maxDate.getMonth(),t.currentMonth):t.config.minDate&&t.currentYear===t.config.minDate.getFullYear()&&(t.currentMonth=Math.max(t.config.minDate.getMonth(),t.currentMonth)),a&&(t.redraw(),G("onYearChange"),B())}}function S(n,e){var a;void 0===e&&(e=!0);var r=t.parseDate(n,void 0,e);if(t.config.minDate&&r&&gn(r,t.config.minDate,void 0!==e?e:!t.minDateHasTime)<0||t.config.maxDate&&r&&gn(r,t.config.maxDate,void 0!==e?e:!t.maxDateHasTime)>0)return!1;if(!t.config.enable&&0===t.config.disable.length)return!0;if(void 0===r)return!1;for(var o=!!t.config.enable,i=null!==(a=t.config.enable)&&void 0!==a?a:t.config.disable,l=0,c=void 0;l<i.length;l++){if("function"==typeof(c=i[l])&&c(r))return o;if(c instanceof Date&&void 0!==r&&c.getTime()===r.getTime())return o;if("string"==typeof c){var d=t.parseDate(c,void 0,!0);return d&&d.getTime()===r.getTime()?o:!o}if("object"==typeof c&&void 0!==r&&c.from&&c.to&&r.getTime()>=c.from.getTime()&&r.getTime()<=c.to.getTime())return o}return!o}function j(n){return void 0!==t.daysContainer&&-1===n.className.indexOf("hidden")&&-1===n.className.indexOf("flatpickr-disabled")&&t.daysContainer.contains(n)}function Y(n){var e=n.target===t._input,a=t._input.value.trimEnd()!==fn();!e||!a||n.relatedTarget&&I(n.relatedTarget)||t.setDate(t._input.value,!0,n.target===t.altInput?t.config.altFormat:t.config.dateFormat)}function W(e){var r=dn(e),o=t.config.wrap?n.contains(r):r===t._input,c=t.config.allowInput,d=t.isOpen&&(!c||!o),s=t.config.inline&&o&&!c;if(13===e.keyCode&&o){if(c)return t.setDate(t._input.value,!0,r===t.altInput?t.config.altFormat:t.config.dateFormat),t.close(),r.blur();t.open()}else if(I(r)||d||s){var A=!!t.timeContainer&&t.timeContainer.contains(r);switch(e.keyCode){case 13:A?(e.preventDefault(),i(),z()):_(e);break;case 27:e.preventDefault(),z();break;case 8:case 46:o&&!t.config.allowInput&&(e.preventDefault(),t.clear());break;case 37:case 39:if(A||o)t.hourElement&&t.hourElement.focus();else{e.preventDefault();var p=a();if(void 0!==t.daysContainer&&(!1===c||p&&j(p))){var u=39===e.keyCode?1:-1;e.ctrlKey?(e.stopPropagation(),D(u),b(C(1),0)):b(void 0,u)}}break;case 38:case 40:e.preventDefault();var f=40===e.keyCode?1:-1;t.daysContainer&&void 0!==r.$i||r===t.input||r===t.altInput?e.ctrlKey?(e.stopPropagation(),T(t.currentYear-f),b(C(1),0)):A||b(void 0,7*f):r===t.currentYearElement?T(t.currentYear-f):t.config.enableTime&&(!A&&t.hourElement&&t.hourElement.focus(),i(e),t._debouncedChange());break;case 9:if(A){var h=[t.hourElement,t.minuteElement,t.secondElement,t.amPM].concat(t.pluginElements).filter((function(n){return n})),m=h.indexOf(r);if(-1!==m){var g=h[m+(e.shiftKey?-1:1)];e.preventDefault(),(g||t._input).focus()}}else!t.config.noCalendar&&t.daysContainer&&t.daysContainer.contains(r)&&e.shiftKey&&(e.preventDefault(),t._input.focus())}}if(void 0!==t.amPM&&r===t.amPM)switch(e.key){case t.l10n.amPM[0].charAt(0):case t.l10n.amPM[0].charAt(0).toLowerCase():t.amPM.textContent=t.l10n.amPM[0],l(),En();break;case t.l10n.amPM[1].charAt(0):case t.l10n.amPM[1].charAt(0).toLowerCase():t.amPM.textContent=t.l10n.amPM[1],l(),En()}(o||I(r))&&G("onKeyDown",e)}function U(n,e){if(void 0===e&&(e="flatpickr-day"),1===t.selectedDates.length&&(!n||n.classList.contains(e)&&!n.classList.contains("flatpickr-disabled"))){for(var a=n?n.dateObj.getTime():t.days.firstElementChild.dateObj.getTime(),r=t.parseDate(t.selectedDates[0],void 0,!0).getTime(),o=Math.min(a,t.selectedDates[0].getTime()),i=Math.max(a,t.selectedDates[0].getTime()),l=!1,c=0,d=0,s=o;s<i;s+=xn.DAY)S(new Date(s),!0)||(l=l||s>o&&s<i,s<r&&(!c||s>c)?c=s:s>r&&(!d||s<d)&&(d=s));Array.from(t.rContainer.querySelectorAll("*:nth-child(-n+"+t.config.showMonths+") > ."+e)).forEach((function(e){var o=e.dateObj.getTime(),i=c>0&&o<c||d>0&&o>d;if(i)return e.classList.add("notAllowed"),void["inRange","startRange","endRange"].forEach((function(n){e.classList.remove(n)}));l&&!i||(["startRange","inRange","endRange","notAllowed"].forEach((function(n){e.classList.remove(n)})),void 0!==n&&(n.classList.add(a<=t.selectedDates[0].getTime()?"startRange":"endRange"),r<a&&o===r?e.classList.add("startRange"):r>a&&o===r&&e.classList.add("endRange"),o>=c&&(0===d||o<=d)&&Cn(o,r,a)&&e.classList.add("inRange")))}))}}function P(){!t.isOpen||t.config.static||t.config.inline||F()}function R(n){return function(e){var a=t.config["_"+n+"Date"]=t.parseDate(e,t.config.dateFormat),r=t.config["_"+("min"===n?"max":"min")+"Date"];void 0!==a&&(t["min"===n?"minDateHasTime":"maxDateHasTime"]=a.getHours()>0||a.getMinutes()>0||a.getSeconds()>0),t.selectedDates&&(t.selectedDates=t.selectedDates.filter((function(n){return S(n)})),t.selectedDates.length||"min"!==n||c(a),En()),t.daysContainer&&(N(),void 0!==a?t.currentYearElement[n]=a.getFullYear().toString():t.currentYearElement.removeAttribute(n),t.currentYearElement.disabled=!!r&&void 0!==a&&r.getFullYear()===a.getFullYear())}}function q(){return t.config.wrap?n.querySelector("[data-input]"):n}function O(){"object"!=typeof t.config.locale&&void 0===In.l10ns[t.config.locale]&&t.config.errorHandler(new Error("flatpickr: invalid locale "+t.config.locale)),t.l10n=kn(kn({},In.l10ns.default),"object"==typeof t.config.locale?t.config.locale:"default"!==t.config.locale?In.l10ns[t.config.locale]:void 0),un.D="("+t.l10n.weekdays.shorthand.join("|")+")",un.l="("+t.l10n.weekdays.longhand.join("|")+")",un.M="("+t.l10n.months.shorthand.join("|")+")",un.F="("+t.l10n.months.longhand.join("|")+")",un.K="("+t.l10n.amPM[0]+"|"+t.l10n.amPM[1]+"|"+t.l10n.amPM[0].toLowerCase()+"|"+t.l10n.amPM[1].toLowerCase()+")",void 0===kn(kn({},e),JSON.parse(JSON.stringify(n.dataset||{}))).time_24hr&&void 0===In.defaultConfig.time_24hr&&(t.config.time_24hr=t.l10n.time_24hr),t.formatDate=hn(t),t.parseDate=mn({config:t.config,l10n:t.l10n})}function F(n){if("function"!=typeof t.config.position){if(void 0!==t.calendarContainer){G("onPreCalendarPosition");var e=n||t._positionElement,a=Array.prototype.reduce.call(t.calendarContainer.children,(function(n,e){return n+e.offsetHeight}),0),r=t.calendarContainer.offsetWidth,o=t.config.position.split(" "),i=o[0],l=o.length>1?o[1]:null,c=e.getBoundingClientRect(),d=window.innerHeight-c.bottom,s="above"===i||"below"!==i&&d<a&&c.top>a,A=window.pageYOffset+c.top+(s?-a-2:e.offsetHeight+2);if(an(t.calendarContainer,"arrowTop",!s),an(t.calendarContainer,"arrowBottom",s),!t.config.inline){var p=window.pageXOffset+c.left,u=!1,f=!1;"center"===l?(p-=(r-c.width)/2,u=!0):"right"===l&&(p-=r-c.width,f=!0),an(t.calendarContainer,"arrowLeft",!u&&!f),an(t.calendarContainer,"arrowCenter",u),an(t.calendarContainer,"arrowRight",f);var h=window.document.body.offsetWidth-(window.pageXOffset+c.right),m=p+r>window.document.body.offsetWidth,g=h+r>window.document.body.offsetWidth;if(an(t.calendarContainer,"rightMost",m),!t.config.static)if(t.calendarContainer.style.top=A+"px",m)if(g){var C=function(){for(var n=null,e=0;e<document.styleSheets.length;e++){var t=document.styleSheets[e];if(t.cssRules){try{t.cssRules}catch(n){continue}n=t;break}}return null!=n?n:function(){var n=document.createElement("style");return document.head.appendChild(n),n.sheet}()}();if(void 0===C)return;var b=window.document.body.offsetWidth,v=Math.max(0,b/2-r/2),x=C.cssRules.length,B="{left:"+c.left+"px;right:auto;}";an(t.calendarContainer,"rightMost",!1),an(t.calendarContainer,"centerMost",!0),C.insertRule(".flatpickr-calendar.centerMost:before,.flatpickr-calendar.centerMost:after"+B,x),t.calendarContainer.style.left=v+"px",t.calendarContainer.style.right="auto"}else t.calendarContainer.style.left="auto",t.calendarContainer.style.right=h+"px";else t.calendarContainer.style.left=p+"px",t.calendarContainer.style.right="auto"}}}else t.config.position(t,n)}function N(){t.config.noCalendar||t.isMobile||(B(),pn(),x())}function z(){t._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(t.close,0):t.close()}function _(n){n.preventDefault(),n.stopPropagation();var e=ln(dn(n),(function(n){return n.classList&&n.classList.contains("flatpickr-day")&&!n.classList.contains("flatpickr-disabled")&&!n.classList.contains("notAllowed")}));if(void 0!==e){var a=e,r=t.latestSelectedDateObj=new Date(a.dateObj.getTime()),o=(r.getMonth()<t.currentMonth||r.getMonth()>t.currentMonth+t.config.showMonths-1)&&"range"!==t.config.mode;if(t.selectedDateElem=a,"single"===t.config.mode)t.selectedDates=[r];else if("multiple"===t.config.mode){var i=sn(r);i?t.selectedDates.splice(parseInt(i),1):t.selectedDates.push(r)}else"range"===t.config.mode&&(2===t.selectedDates.length&&t.clear(!1,!1),t.latestSelectedDateObj=r,t.selectedDates.push(r),0!==gn(r,t.selectedDates[0],!0)&&t.selectedDates.sort((function(n,e){return n.getTime()-e.getTime()})));if(l(),o){var c=t.currentYear!==r.getFullYear();t.currentYear=r.getFullYear(),t.currentMonth=r.getMonth(),c&&(G("onYearChange"),B()),G("onMonthChange")}if(pn(),x(),En(),o||"range"===t.config.mode||1!==t.config.showMonths?void 0!==t.selectedDateElem&&void 0===t.hourElement&&t.selectedDateElem&&t.selectedDateElem.focus():g(a),void 0!==t.hourElement&&void 0!==t.hourElement&&t.hourElement.focus(),t.config.closeOnSelect){var d="single"===t.config.mode&&!t.config.enableTime,s="range"===t.config.mode&&2===t.selectedDates.length&&!t.config.enableTime;(d||s)&&z()}p()}}t.parseDate=mn({config:t.config,l10n:t.l10n}),t._handlers=[],t.pluginElements=[],t.loadedPlugins=[],t._bind=A,t._setHoursFromDate=c,t._positionCalendar=F,t.changeMonth=D,t.changeYear=T,t.clear=function(n,e){if(void 0===n&&(n=!0),void 0===e&&(e=!0),t.input.value="",void 0!==t.altInput&&(t.altInput.value=""),void 0!==t.mobileInput&&(t.mobileInput.value=""),t.selectedDates=[],t.latestSelectedDateObj=void 0,!0===e&&(t.currentYear=t._initialDate.getFullYear(),t.currentMonth=t._initialDate.getMonth()),!0===t.config.enableTime){var a=Bn(t.config);d(a.hours,a.minutes,a.seconds)}t.redraw(),n&&G("onChange")},t.close=function(){t.isOpen=!1,t.isMobile||(void 0!==t.calendarContainer&&t.calendarContainer.classList.remove("open"),void 0!==t._input&&t._input.classList.remove("active")),G("onClose")},t.onMouseOver=U,t._createElement=rn,t.createDay=m,t.destroy=function(){void 0!==t.config&&G("onDestroy");for(var n=t._handlers.length;n--;)t._handlers[n].remove();if(t._handlers=[],t.mobileInput)t.mobileInput.parentNode&&t.mobileInput.parentNode.removeChild(t.mobileInput),t.mobileInput=void 0;else if(t.calendarContainer&&t.calendarContainer.parentNode)if(t.config.static&&t.calendarContainer.parentNode){var e=t.calendarContainer.parentNode;if(e.lastChild&&e.removeChild(e.lastChild),e.parentNode){for(;e.firstChild;)e.parentNode.insertBefore(e.firstChild,e);e.parentNode.removeChild(e)}}else t.calendarContainer.parentNode.removeChild(t.calendarContainer);t.altInput&&(t.input.type="text",t.altInput.parentNode&&t.altInput.parentNode.removeChild(t.altInput),delete t.altInput),t.input&&(t.input.type=t.input._type,t.input.classList.remove("flatpickr-input"),t.input.removeAttribute("readonly")),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","monthsDropdownContainer","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach((function(n){try{delete t[n]}catch(n){}}))},t.isEnabled=S,t.jumpToDate=u,t.updateValue=En,t.open=function(n,e){if(void 0===e&&(e=t._positionElement),!0===t.isMobile){if(n){n.preventDefault();var a=dn(n);a&&a.blur()}return void 0!==t.mobileInput&&(t.mobileInput.focus(),t.mobileInput.click()),void G("onOpen")}if(!t._input.disabled&&!t.config.inline){var r=t.isOpen;t.isOpen=!0,r||(t.calendarContainer.classList.add("open"),t._input.classList.add("active"),G("onOpen"),F(e)),!0===t.config.enableTime&&!0===t.config.noCalendar&&(!1!==t.config.allowInput||void 0!==n&&t.timeContainer.contains(n.relatedTarget)||setTimeout((function(){return t.hourElement.select()}),50))}},t.redraw=N,t.set=function(n,e){if(null!==n&&"object"==typeof n)for(var a in Object.assign(t.config,n),n)void 0!==H[a]&&H[a].forEach((function(n){return n()}));else t.config[n]=e,void 0!==H[n]?H[n].forEach((function(n){return n()})):V.indexOf(n)>-1&&(t.config[n]=tn(e));t.redraw(),En(!0)},t.setDate=function(n,e,a){if(void 0===e&&(e=!1),void 0===a&&(a=t.config.dateFormat),0!==n&&!n||n instanceof Array&&0===n.length)return t.clear(e);L(n,a),t.latestSelectedDateObj=t.selectedDates[t.selectedDates.length-1],t.redraw(),u(void 0,e),c(),0===t.selectedDates.length&&t.clear(!1),En(e),e&&G("onChange")},t.toggle=function(n){if(!0===t.isOpen)return t.close();t.open(n)};var H={locale:[O,E],showMonths:[w,o,y],minDate:[u],maxDate:[u],positionElement:[Z],clickOpens:[function(){!0===t.config.clickOpens?(A(t._input,"focus",t.open),A(t._input,"click",t.open)):(t._input.removeEventListener("focus",t.open),t._input.removeEventListener("click",t.open))}]};function L(n,e){var a=[];if(n instanceof Array)a=n.map((function(n){return t.parseDate(n,e)}));else if(n instanceof Date||"number"==typeof n)a=[t.parseDate(n,e)];else if("string"==typeof n)switch(t.config.mode){case"single":case"time":a=[t.parseDate(n,e)];break;case"multiple":a=n.split(t.config.conjunction).map((function(n){return t.parseDate(n,e)}));break;case"range":a=n.split(t.l10n.rangeSeparator).map((function(n){return t.parseDate(n,e)}))}else t.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(n)));t.selectedDates=t.config.allowInvalidPreload?a:a.filter((function(n){return n instanceof Date&&S(n,!1)})),"range"===t.config.mode&&t.selectedDates.sort((function(n,e){return n.getTime()-e.getTime()}))}function X(n){return n.slice().map((function(n){return"string"==typeof n||"number"==typeof n||n instanceof Date?t.parseDate(n,void 0,!0):n&&"object"==typeof n&&n.from&&n.to?{from:t.parseDate(n.from,void 0),to:t.parseDate(n.to,void 0)}:n})).filter((function(n){return n}))}function Z(){t._positionElement=t.config.positionElement||t._input}function G(n,e){if(void 0!==t.config){var a=t.config[n];if(void 0!==a&&a.length>0)for(var r=0;a[r]&&r<a.length;r++)a[r](t.selectedDates,t.input.value,t,e);"onChange"===n&&(t.input.dispatchEvent(J("change")),t.input.dispatchEvent(J("input")))}}function J(n){var e=document.createEvent("Event");return e.initEvent(n,!0,!0),e}function sn(n){for(var e=0;e<t.selectedDates.length;e++){var a=t.selectedDates[e];if(a instanceof Date&&0===gn(a,n))return""+e}return!1}function pn(){t.config.noCalendar||t.isMobile||!t.monthNav||(t.yearElements.forEach((function(n,e){var a=new Date(t.currentYear,t.currentMonth,1);a.setMonth(t.currentMonth+e),t.config.showMonths>1||"static"===t.config.monthSelectorType?t.monthElements[e].textContent=An(a.getMonth(),t.config.shorthandCurrentMonth,t.l10n)+" ":t.monthsDropdownContainer.value=a.getMonth().toString(),n.value=a.getFullYear().toString()})),t._hidePrevMonthArrow=void 0!==t.config.minDate&&(t.currentYear===t.config.minDate.getFullYear()?t.currentMonth<=t.config.minDate.getMonth():t.currentYear<t.config.minDate.getFullYear()),t._hideNextMonthArrow=void 0!==t.config.maxDate&&(t.currentYear===t.config.maxDate.getFullYear()?t.currentMonth+1>t.config.maxDate.getMonth():t.currentYear>t.config.maxDate.getFullYear()))}function fn(n){var e=n||(t.config.altInput?t.config.altFormat:t.config.dateFormat);return t.selectedDates.map((function(n){return t.formatDate(n,e)})).filter((function(n,e,a){return"range"!==t.config.mode||t.config.enableTime||a.indexOf(n)===e})).join("range"!==t.config.mode?t.config.conjunction:t.l10n.rangeSeparator)}function En(n){void 0===n&&(n=!0),void 0!==t.mobileInput&&t.mobileFormatStr&&(t.mobileInput.value=void 0!==t.latestSelectedDateObj?t.formatDate(t.latestSelectedDateObj,t.mobileFormatStr):""),t.input.value=fn(t.config.dateFormat),void 0!==t.altInput&&(t.altInput.value=fn(t.config.altFormat)),!1!==n&&G("onValueUpdate")}function Dn(n){var e=dn(n),a=t.prevMonthNav.contains(e),r=t.nextMonthNav.contains(e);a||r?D(a?-1:1):t.yearElements.indexOf(e)>=0?e.select():e.classList.contains("arrowUp")?t.changeYear(t.currentYear+1):e.classList.contains("arrowDown")&&t.changeYear(t.currentYear-1)}return function(){t.element=t.input=n,t.isOpen=!1,function(){var a=["wrap","weekNumbers","allowInput","allowInvalidPreload","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],o=kn(kn({},JSON.parse(JSON.stringify(n.dataset||{}))),e),i={};t.config.parseDate=o.parseDate,t.config.formatDate=o.formatDate,Object.defineProperty(t.config,"enable",{get:function(){return t.config._enable},set:function(n){t.config._enable=X(n)}}),Object.defineProperty(t.config,"disable",{get:function(){return t.config._disable},set:function(n){t.config._disable=X(n)}});var l="time"===o.mode;if(!o.dateFormat&&(o.enableTime||l)){var c=In.defaultConfig.dateFormat||Q.dateFormat;i.dateFormat=o.noCalendar||l?"H:i"+(o.enableSeconds?":S":""):c+" H:i"+(o.enableSeconds?":S":"")}if(o.altInput&&(o.enableTime||l)&&!o.altFormat){var d=In.defaultConfig.altFormat||Q.altFormat;i.altFormat=o.noCalendar||l?"h:i"+(o.enableSeconds?":S K":" K"):d+" h:i"+(o.enableSeconds?":S":"")+" K"}Object.defineProperty(t.config,"minDate",{get:function(){return t.config._minDate},set:R("min")}),Object.defineProperty(t.config,"maxDate",{get:function(){return t.config._maxDate},set:R("max")});var s=function(n){return function(e){t.config["min"===n?"_minTime":"_maxTime"]=t.parseDate(e,"H:i:S")}};Object.defineProperty(t.config,"minTime",{get:function(){return t.config._minTime},set:s("min")}),Object.defineProperty(t.config,"maxTime",{get:function(){return t.config._maxTime},set:s("max")}),"time"===o.mode&&(t.config.noCalendar=!0,t.config.enableTime=!0),Object.assign(t.config,i,o);for(var A=0;A<a.length;A++)t.config[a[A]]=!0===t.config[a[A]]||"true"===t.config[a[A]];for(V.filter((function(n){return void 0!==t.config[n]})).forEach((function(n){t.config[n]=tn(t.config[n]||[]).map(r)})),t.isMobile=!t.config.disableMobile&&!t.config.inline&&"single"===t.config.mode&&!t.config.disable.length&&!t.config.enable&&!t.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),A=0;A<t.config.plugins.length;A++){var p=t.config.plugins[A](t)||{};for(var u in p)V.indexOf(u)>-1?t.config[u]=tn(p[u]).map(r).concat(t.config[u]):void 0===o[u]&&(t.config[u]=p[u])}o.altInputClass||(t.config.altInputClass=q().className+" "+t.config.altInputClass),G("onParseConfig")}(),O(),t.input=q(),t.input?(t.input._type=t.input.type,t.input.type="text",t.input.classList.add("flatpickr-input"),t._input=t.input,t.config.altInput&&(t.altInput=rn(t.input.nodeName,t.config.altInputClass),t._input=t.altInput,t.altInput.placeholder=t.input.placeholder,t.altInput.disabled=t.input.disabled,t.altInput.required=t.input.required,t.altInput.tabIndex=t.input.tabIndex,t.altInput.type="text",t.input.setAttribute("type","hidden"),!t.config.static&&t.input.parentNode&&t.input.parentNode.insertBefore(t.altInput,t.input.nextSibling)),t.config.allowInput||t._input.setAttribute("readonly","readonly"),Z()):t.config.errorHandler(new Error("Invalid input element specified")),function(){t.selectedDates=[],t.now=t.parseDate(t.config.now)||new Date;var n=t.config.defaultDate||("INPUT"!==t.input.nodeName&&"TEXTAREA"!==t.input.nodeName||!t.input.placeholder||t.input.value!==t.input.placeholder?t.input.value:null);n&&L(n,t.config.dateFormat),t._initialDate=t.selectedDates.length>0?t.selectedDates[0]:t.config.minDate&&t.config.minDate.getTime()>t.now.getTime()?t.config.minDate:t.config.maxDate&&t.config.maxDate.getTime()<t.now.getTime()?t.config.maxDate:t.now,t.currentYear=t._initialDate.getFullYear(),t.currentMonth=t._initialDate.getMonth(),t.selectedDates.length>0&&(t.latestSelectedDateObj=t.selectedDates[0]),void 0!==t.config.minTime&&(t.config.minTime=t.parseDate(t.config.minTime,"H:i")),void 0!==t.config.maxTime&&(t.config.maxTime=t.parseDate(t.config.maxTime,"H:i")),t.minDateHasTime=!!t.config.minDate&&(t.config.minDate.getHours()>0||t.config.minDate.getMinutes()>0||t.config.minDate.getSeconds()>0),t.maxDateHasTime=!!t.config.maxDate&&(t.config.maxDate.getHours()>0||t.config.maxDate.getMinutes()>0||t.config.maxDate.getSeconds()>0)}(),t.utils={getDaysInMonth:function(n,e){return void 0===n&&(n=t.currentMonth),void 0===e&&(e=t.currentYear),1===n&&(e%4==0&&e%100!=0||e%400==0)?29:t.l10n.daysInMonth[n]}},t.isMobile||function(){var n=window.document.createDocumentFragment();if(t.calendarContainer=rn("div","flatpickr-calendar"),t.calendarContainer.tabIndex=-1,!t.config.noCalendar){if(n.appendChild((t.monthNav=rn("div","flatpickr-months"),t.yearElements=[],t.monthElements=[],t.prevMonthNav=rn("span","flatpickr-prev-month"),t.prevMonthNav.innerHTML=t.config.prevArrow,t.nextMonthNav=rn("span","flatpickr-next-month"),t.nextMonthNav.innerHTML=t.config.nextArrow,w(),Object.defineProperty(t,"_hidePrevMonthArrow",{get:function(){return t.__hidePrevMonthArrow},set:function(n){t.__hidePrevMonthArrow!==n&&(an(t.prevMonthNav,"flatpickr-disabled",n),t.__hidePrevMonthArrow=n)}}),Object.defineProperty(t,"_hideNextMonthArrow",{get:function(){return t.__hideNextMonthArrow},set:function(n){t.__hideNextMonthArrow!==n&&(an(t.nextMonthNav,"flatpickr-disabled",n),t.__hideNextMonthArrow=n)}}),t.currentYearElement=t.yearElements[0],pn(),t.monthNav)),t.innerContainer=rn("div","flatpickr-innerContainer"),t.config.weekNumbers){var e=function(){t.calendarContainer.classList.add("hasWeeks");var n=rn("div","flatpickr-weekwrapper");n.appendChild(rn("span","flatpickr-weekday",t.l10n.weekAbbreviation));var e=rn("div","flatpickr-weeks");return n.appendChild(e),{weekWrapper:n,weekNumbers:e}}(),a=e.weekWrapper,r=e.weekNumbers;t.innerContainer.appendChild(a),t.weekNumbers=r,t.weekWrapper=a}t.rContainer=rn("div","flatpickr-rContainer"),t.rContainer.appendChild(y()),t.daysContainer||(t.daysContainer=rn("div","flatpickr-days"),t.daysContainer.tabIndex=-1),x(),t.rContainer.appendChild(t.daysContainer),t.innerContainer.appendChild(t.rContainer),n.appendChild(t.innerContainer)}t.config.enableTime&&n.appendChild(function(){t.calendarContainer.classList.add("hasTime"),t.config.noCalendar&&t.calendarContainer.classList.add("noCalendar");var n=Bn(t.config);t.timeContainer=rn("div","flatpickr-time"),t.timeContainer.tabIndex=-1;var e=rn("span","flatpickr-time-separator",":"),a=cn("flatpickr-hour",{"aria-label":t.l10n.hourAriaLabel});t.hourElement=a.getElementsByTagName("input")[0];var r=cn("flatpickr-minute",{"aria-label":t.l10n.minuteAriaLabel});if(t.minuteElement=r.getElementsByTagName("input")[0],t.hourElement.tabIndex=t.minuteElement.tabIndex=-1,t.hourElement.value=$(t.latestSelectedDateObj?t.latestSelectedDateObj.getHours():t.config.time_24hr?n.hours:function(n){switch(n%24){case 0:case 12:return 12;default:return n%12}}(n.hours)),t.minuteElement.value=$(t.latestSelectedDateObj?t.latestSelectedDateObj.getMinutes():n.minutes),t.hourElement.setAttribute("step",t.config.hourIncrement.toString()),t.minuteElement.setAttribute("step",t.config.minuteIncrement.toString()),t.hourElement.setAttribute("min",t.config.time_24hr?"0":"1"),t.hourElement.setAttribute("max",t.config.time_24hr?"23":"12"),t.hourElement.setAttribute("maxlength","2"),t.minuteElement.setAttribute("min","0"),t.minuteElement.setAttribute("max","59"),t.minuteElement.setAttribute("maxlength","2"),t.timeContainer.appendChild(a),t.timeContainer.appendChild(e),t.timeContainer.appendChild(r),t.config.time_24hr&&t.timeContainer.classList.add("time24hr"),t.config.enableSeconds){t.timeContainer.classList.add("hasSeconds");var o=cn("flatpickr-second");t.secondElement=o.getElementsByTagName("input")[0],t.secondElement.value=$(t.latestSelectedDateObj?t.latestSelectedDateObj.getSeconds():n.seconds),t.secondElement.setAttribute("step",t.minuteElement.getAttribute("step")),t.secondElement.setAttribute("min","0"),t.secondElement.setAttribute("max","59"),t.secondElement.setAttribute("maxlength","2"),t.timeContainer.appendChild(rn("span","flatpickr-time-separator",":")),t.timeContainer.appendChild(o)}return t.config.time_24hr||(t.amPM=rn("span","flatpickr-am-pm",t.l10n.amPM[nn((t.latestSelectedDateObj?t.hourElement.value:t.config.defaultHour)>11)]),t.amPM.title=t.l10n.toggleTitle,t.amPM.tabIndex=-1,t.timeContainer.appendChild(t.amPM)),t.timeContainer}()),an(t.calendarContainer,"rangeMode","range"===t.config.mode),an(t.calendarContainer,"animate",!0===t.config.animate),an(t.calendarContainer,"multiMonth",t.config.showMonths>1),t.calendarContainer.appendChild(n);var o=void 0!==t.config.appendTo&&void 0!==t.config.appendTo.nodeType;if((t.config.inline||t.config.static)&&(t.calendarContainer.classList.add(t.config.inline?"inline":"static"),t.config.inline&&(!o&&t.element.parentNode?t.element.parentNode.insertBefore(t.calendarContainer,t._input.nextSibling):void 0!==t.config.appendTo&&t.config.appendTo.appendChild(t.calendarContainer)),t.config.static)){var i=rn("div","flatpickr-wrapper");t.element.parentNode&&t.element.parentNode.insertBefore(i,t.element),i.appendChild(t.element),t.altInput&&i.appendChild(t.altInput),i.appendChild(t.calendarContainer)}t.config.static||t.config.inline||(void 0!==t.config.appendTo?t.config.appendTo:window.document.body).appendChild(t.calendarContainer)}(),function(){if(t.config.wrap&&["open","close","toggle","clear"].forEach((function(n){Array.prototype.forEach.call(t.element.querySelectorAll("[data-"+n+"]"),(function(e){return A(e,"click",t[n])}))})),t.isMobile)!function(){var n=t.config.enableTime?t.config.noCalendar?"time":"datetime-local":"date";t.mobileInput=rn("input",t.input.className+" flatpickr-mobile"),t.mobileInput.tabIndex=1,t.mobileInput.type=n,t.mobileInput.disabled=t.input.disabled,t.mobileInput.required=t.input.required,t.mobileInput.placeholder=t.input.placeholder,t.mobileFormatStr="datetime-local"===n?"Y-m-d\\TH:i:S":"date"===n?"Y-m-d":"H:i:S",t.selectedDates.length>0&&(t.mobileInput.defaultValue=t.mobileInput.value=t.formatDate(t.selectedDates[0],t.mobileFormatStr)),t.config.minDate&&(t.mobileInput.min=t.formatDate(t.config.minDate,"Y-m-d")),t.config.maxDate&&(t.mobileInput.max=t.formatDate(t.config.maxDate,"Y-m-d")),t.input.getAttribute("step")&&(t.mobileInput.step=String(t.input.getAttribute("step"))),t.input.type="hidden",void 0!==t.altInput&&(t.altInput.type="hidden");try{t.input.parentNode&&t.input.parentNode.insertBefore(t.mobileInput,t.input.nextSibling)}catch(n){}A(t.mobileInput,"change",(function(n){t.setDate(dn(n).value,!1,t.mobileFormatStr),G("onChange"),G("onClose")}))}();else{var n=en(P,50);if(t._debouncedChange=en(p,yn),t.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&A(t.daysContainer,"mouseover",(function(n){"range"===t.config.mode&&U(dn(n))})),A(t._input,"keydown",W),void 0!==t.calendarContainer&&A(t.calendarContainer,"keydown",W),t.config.inline||t.config.static||A(window,"resize",n),void 0!==window.ontouchstart?A(window.document,"touchstart",M):A(window.document,"mousedown",M),A(window.document,"focus",M,{capture:!0}),!0===t.config.clickOpens&&(A(t._input,"focus",t.open),A(t._input,"click",t.open)),void 0!==t.daysContainer&&(A(t.monthNav,"click",Dn),A(t.monthNav,["keyup","increment"],s),A(t.daysContainer,"click",_)),void 0!==t.timeContainer&&void 0!==t.minuteElement&&void 0!==t.hourElement){A(t.timeContainer,["increment"],i),A(t.timeContainer,"blur",i,{capture:!0}),A(t.timeContainer,"click",f),A([t.hourElement,t.minuteElement],["focus","click"],(function(n){return dn(n).select()})),void 0!==t.secondElement&&A(t.secondElement,"focus",(function(){return t.secondElement&&t.secondElement.select()})),void 0!==t.amPM&&A(t.amPM,"click",(function(n){i(n)}))}t.config.allowInput&&A(t._input,"blur",Y)}}(),(t.selectedDates.length||t.config.noCalendar)&&(t.config.enableTime&&c(t.config.noCalendar?t.latestSelectedDateObj:void 0),En(!1)),o();var a=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!t.isMobile&&a&&F(),G("onReady")}(),t}function Dn(n,e){for(var t=Array.prototype.slice.call(n).filter((function(n){return n instanceof HTMLElement})),a=[],r=0;r<t.length;r++){var o=t[r];try{if(null!==o.getAttribute("data-fp-omit"))continue;void 0!==o._flatpickr&&(o._flatpickr.destroy(),o._flatpickr=void 0),o._flatpickr=En(o,e||{}),a.push(o._flatpickr)}catch(n){console.error(n)}}return 1===a.length?a[0]:a}"undefined"!=typeof HTMLElement&&"undefined"!=typeof HTMLCollection&&"undefined"!=typeof NodeList&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(n){return Dn(this,n)},HTMLElement.prototype.flatpickr=function(n){return Dn([this],n)});var In=function(n,e){return"string"==typeof n?Dn(window.document.querySelectorAll(n),e):n instanceof Node?Dn([n],e):Dn(n,e)};In.defaultConfig={},In.l10ns={en:kn({},K),default:kn({},K)},In.localize=function(n){In.l10ns.default=kn(kn({},In.l10ns.default),n)},In.setDefaults=function(n){In.defaultConfig=kn(kn({},In.defaultConfig),n)},In.parseDate=mn({}),In.formatDate=hn({}),In.compareDates=gn,"undefined"!=typeof jQuery&&void 0!==jQuery.fn&&(jQuery.fn.flatpickr=function(n){return Dn(this,n)}),Date.prototype.fp_incr=function(n){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof n?parseInt(n,10):n))},"undefined"!=typeof window&&(window.flatpickr=In);const Mn=In;function Tn(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Sn(n){E(1,arguments);var e=D(n),t=e.getUTCDay(),a=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function jn(n){E(1,arguments);var e=D(n),t=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(t+1,0,4),a.setUTCHours(0,0,0,0);var r=Sn(a),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var i=Sn(o);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function Yn(n,e){var t,a,r,o,i,l,c,d;E(1,arguments);var s=w(),A=Tn(null!==(t=null!==(a=null!==(r=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:s.weekStartsOn)&&void 0!==a?a:null===(c=s.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=D(n),u=p.getUTCDay(),f=(u<A?7:0)+u-A;return p.setUTCDate(p.getUTCDate()-f),p.setUTCHours(0,0,0,0),p}function Wn(n,e){var t,a,r,o,i,l,c,d;E(1,arguments);var s=D(n),A=s.getUTCFullYear(),p=w(),u=Tn(null!==(t=null!==(a=null!==(r=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:p.firstWeekContainsDate)&&void 0!==a?a:null===(c=p.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(A+1,0,u),f.setUTCHours(0,0,0,0);var h=Yn(f,e),m=new Date(0);m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0);var g=Yn(m,e);return s.getTime()>=h.getTime()?A+1:s.getTime()>=g.getTime()?A:A-1}function Un(n,e){for(var t=n<0?"-":"",a=Math.abs(n).toString();a.length<e;)a="0"+a;return t+a}const Pn=function(n,e){var t=n.getUTCFullYear(),a=t>0?t:1-t;return Un("yy"===e?a%100:a,e.length)},Rn=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):Un(t+1,2)},qn=function(n,e){return Un(n.getUTCDate(),e.length)},On=function(n,e){return Un(n.getUTCHours()%12||12,e.length)},Fn=function(n,e){return Un(n.getUTCHours(),e.length)},Nn=function(n,e){return Un(n.getUTCMinutes(),e.length)},zn=function(n,e){return Un(n.getUTCSeconds(),e.length)},_n=function(n,e){var t=e.length,a=n.getUTCMilliseconds();return Un(Math.floor(a*Math.pow(10,t-3)),e.length)};var Hn={G:function(n,e,t){var a=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(a,{width:"abbreviated"});case"GGGGG":return t.era(a,{width:"narrow"});default:return t.era(a,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var a=n.getUTCFullYear(),r=a>0?a:1-a;return t.ordinalNumber(r,{unit:"year"})}return Pn(n,e)},Y:function(n,e,t,a){var r=Wn(n,a),o=r>0?r:1-r;return"YY"===e?Un(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):Un(o,e.length)},R:function(n,e){return Un(jn(n),e.length)},u:function(n,e){return Un(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return Un(a,2);case"Qo":return t.ordinalNumber(a,{unit:"quarter"});case"QQQ":return t.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(a,{width:"narrow",context:"formatting"});default:return t.quarter(a,{width:"wide",context:"formatting"})}},q:function(n,e,t){var a=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return Un(a,2);case"qo":return t.ordinalNumber(a,{unit:"quarter"});case"qqq":return t.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(a,{width:"narrow",context:"standalone"});default:return t.quarter(a,{width:"wide",context:"standalone"})}},M:function(n,e,t){var a=n.getUTCMonth();switch(e){case"M":case"MM":return Rn(n,e);case"Mo":return t.ordinalNumber(a+1,{unit:"month"});case"MMM":return t.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(a,{width:"narrow",context:"formatting"});default:return t.month(a,{width:"wide",context:"formatting"})}},L:function(n,e,t){var a=n.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return Un(a+1,2);case"Lo":return t.ordinalNumber(a+1,{unit:"month"});case"LLL":return t.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(a,{width:"narrow",context:"standalone"});default:return t.month(a,{width:"wide",context:"standalone"})}},w:function(n,e,t,a){var r=function(n,e){E(1,arguments);var t=D(n),a=Yn(t,e).getTime()-function(n,e){var t,a,r,o,i,l,c,d;E(1,arguments);var s=w(),A=Tn(null!==(t=null!==(a=null!==(r=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:s.firstWeekContainsDate)&&void 0!==a?a:null===(c=s.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),p=Wn(n,e),u=new Date(0);return u.setUTCFullYear(p,0,A),u.setUTCHours(0,0,0,0),Yn(u,e)}(t,e).getTime();return Math.round(a/6048e5)+1}(n,a);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):Un(r,e.length)},I:function(n,e,t){var a=function(n){E(1,arguments);var e=D(n),t=Sn(e).getTime()-function(n){E(1,arguments);var e=jn(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),Sn(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(a,{unit:"week"}):Un(a,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):qn(n,e)},D:function(n,e,t){var a=function(n){E(1,arguments);var e=D(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=t-e.getTime();return Math.floor(a/864e5)+1}(n);return"Do"===e?t.ordinalNumber(a,{unit:"dayOfYear"}):Un(a,e.length)},E:function(n,e,t){var a=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},e:function(n,e,t,a){var r=n.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return Un(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,a){var r=n.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return Un(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var a=n.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return Un(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},a:function(n,e,t){var a=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(n,e,t){var a,r=n.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(n,e,t){var a,r=n.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var a=n.getUTCHours()%12;return 0===a&&(a=12),t.ordinalNumber(a,{unit:"hour"})}return On(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):Fn(n,e)},K:function(n,e,t){var a=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(a,{unit:"hour"}):Un(a,e.length)},k:function(n,e,t){var a=n.getUTCHours();return 0===a&&(a=24),"ko"===e?t.ordinalNumber(a,{unit:"hour"}):Un(a,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):Nn(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):zn(n,e)},S:function(n,e){return _n(n,e)},X:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return Xn(r);case"XXXX":case"XX":return Zn(r);default:return Zn(r,":")}},x:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"x":return Xn(r);case"xxxx":case"xx":return Zn(r);default:return Zn(r,":")}},O:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Ln(r,":");default:return"GMT"+Zn(r,":")}},z:function(n,e,t,a){var r=(a._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Ln(r,":");default:return"GMT"+Zn(r,":")}},t:function(n,e,t,a){var r=a._originalDate||n;return Un(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,a){return Un((a._originalDate||n).getTime(),e.length)}};function Ln(n,e){var t=n>0?"-":"+",a=Math.abs(n),r=Math.floor(a/60),o=a%60;if(0===o)return t+String(r);var i=e||"";return t+String(r)+i+Un(o,2)}function Xn(n,e){return n%60==0?(n>0?"-":"+")+Un(Math.abs(n)/60,2):Zn(n,e)}function Zn(n,e){var t=e||"",a=n>0?"-":"+",r=Math.abs(n);return a+Un(Math.floor(r/60),2)+t+Un(r%60,2)}const Gn=Hn;var Vn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Qn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const Jn={p:Qn,P:function(n,e){var t,a=n.match(/(P+)(p+)?/)||[],r=a[1],o=a[2];if(!o)return Vn(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",Vn(r,e)).replace("{{time}}",Qn(o,e))}};var Kn=["D","DD"],$n=["YY","YYYY"];function ne(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ee=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,te=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ae=/^'([^]*?)'?$/,re=/''/g,oe=/[a-zA-Z]/;function ie(n,e,t){var a,r,o,i,l,c,d,s,A,p,u,f,h,m,g,C,b,v;E(2,arguments);var x=String(e),B=w(),k=null!==(a=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:B.locale)&&void 0!==a?a:N,I=Tn(null!==(o=null!==(i=null!==(l=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(d=t.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==l?l:B.firstWeekContainsDate)&&void 0!==i?i:null===(A=B.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==o?o:1);if(!(I>=1&&I<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=Tn(null!==(u=null!==(f=null!==(h=null!==(m=null==t?void 0:t.weekStartsOn)&&void 0!==m?m:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==h?h:B.weekStartsOn)&&void 0!==f?f:null===(b=B.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==u?u:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");var T=D(n);if(!function(n){if(E(1,arguments),!function(n){return E(1,arguments),n instanceof Date||"object"===y(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=D(n);return!isNaN(Number(e))}(T))throw new RangeError("Invalid time value");var S=function(n,e){return E(2,arguments),function(n,e){E(2,arguments);var t=D(n).getTime(),a=Tn(e);return new Date(t+a)}(n,-Tn(e))}(T,_(T)),j={firstWeekContainsDate:I,weekStartsOn:M,locale:k,_originalDate:T};return x.match(te).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,Jn[e])(n,k.formatLong):n})).join("").match(ee).map((function(a){if("''"===a)return"'";var r,o,i=a[0];if("'"===i)return(o=(r=a).match(ae))?o[1].replace(re,"'"):r;var l,c=Gn[i];if(c)return null!=t&&t.useAdditionalWeekYearTokens||(l=a,-1===$n.indexOf(l))||ne(a,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==Kn.indexOf(n)}(a)||ne(a,e,String(n)),c(S,a,k.localize,j);if(i.match(oe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return a})).join("")}function le(n){X(n.parentElement.querySelector(".timestamp"),"".concat(ie(x(),"PPp")))}const ce=function(){this.printStamp=le};var de=function(){return de=Object.assign||function(n){for(var e,t=1,a=arguments.length;t<a;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},de.apply(this,arguments)};t(114);const se=function(){function n(){}return n.renderProject=function(n){var e=document.querySelector("#project-container"),t='\n            <div class="arrow-down" id="new-project-'.concat(n.id,'"></div>\n            <div class="project" id="project-').concat(n.id,'">\n                project-').concat(n.id,"\n            </div>\n        ");e.insertAdjacentHTML("beforeend",t),n.id>1&&v("#new-project-".concat(n.id))},n.renderTab=function(n,e){var t=document.querySelector("#tabholder"),a='\n            <div class="tab" id="project-'.concat(e.id,"-tab-").concat(n.id,'">\n                to-do ').concat(n.id,"    \n            </div>\n        ");t.insertAdjacentHTML("beforeend",a)},n.renderToDo=function(n,e,t){console.log("Rendering ToDo ID: ".concat(n.id));var a,r,o,i,l,c,d,s,A,p=document.querySelector(".to-do.table");if(p){console.log("Container found for ToDo ID: ".concat(n.id,", appending..."));var u='\n            <div class="to-do-row" id="to-do-project-'.concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'">\n                <button id="new-to-do-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" class="new-to-do"></button>\n                <div class="complete-task to-do-cell">\n                    <input type="checkbox" id="check-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" name="check-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" />\n                    <label for="check-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'"></label>\n                </div>\n                <div class="title to-do-cell">\n                    <label class="visually-hidden" for="title-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'">Title</label>\n                    <input type="text" name="title-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" id="title-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" />\n                </div>\n                <div class="description to-do-cell">\n                    <label class="visually-hidden" for="description-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'">Description</label>\n                    <input type="text" name="description-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" id="description-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" />\n                </div>\n                <div id="date-picker-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'" class="date-picker to-do-cell">\n                    <input class="flatpickr" type="text" placeholder="add time" />\n                </div>\n                <div class="priority-slider to-do-cell" id="priority-container-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'">\n                    <div class="priority-boxes">\n                        <div class="box" data-priority="1"></div>\n                        <div class="box" data-priority="2"></div>\n                        <div class="box" data-priority="3"></div>\n                        <div class="box" data-priority="4"></div>\n                        <div class="box" data-priority="5"></div>\n                            <input\n                                type="range"\n                                class="priority-input"\n                                id="priority-slider-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'"\n                                min="0"\n                                max="5"\n                                value="0"\n                            />\n                        </div>\n                </div>\n                <div class="timestamp to-do-cell" id="timestamp-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'"></div>\n                <div class="delete-todo to-do-cell" id="delete-project-').concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id,'"></div>\n            </div>\n    ');p.insertAdjacentHTML("beforeend",u),n.id>1&&v("#new-to-do-".concat(t.id,"-tab-").concat(e.id,"-todo-").concat(n.id)),a=t.id,r=e.id,o=n.id,(A=document.getElementById("date-picker-project-".concat(a,"-tab-").concat(r,"-todo-").concat(o)))&&(i=A,l=new G,c={enableTime:!0,time_24hr:!0,dateFormat:"Y-m-d H:i",defaultDate:x(),minuteIncrement:5,weekNumbers:!0},d=null,s=new ce,Mn(i,de(de({},c),{onOpen:function(n,e,t){l&&l.stop();var a=n[0]||new Date,r=a.getMinutes(),o=5*Math.ceil(r/5);a.setMinutes(o),t.setDate(a),d=a},onClose:function(n){var e=n[0];X(i,"pending"),l.setCountdown(e,i),d&&e.getTime()===d.getTime()||s.printStamp(i),l.start()},onChange:function(n,e,t){setTimeout((function(){var n=t.latestSelectedDateObj;n.getMinutes()%5&&n.setMinutes(5*Math.round(n.getMinutes()/5)),t.setDate(n,!1)}),100),console.log(n)},mode:"single",minDate:"today"}))),document.querySelectorAll(".to-do-row").forEach((function(n){var e=n.querySelector(".priority-slider");if(e){var t=e.querySelector(".priority-input"),a=e.querySelectorAll(".box"),r=!1;e.addEventListener("mousedown",(function(){r=!0})),document.addEventListener("mouseup",(function(){r=!1})),e.addEventListener("mousemove",(function(n){if(r){var e=a[0].getBoundingClientRect().left;n.clientX<=e?t.value="0":a.forEach((function(e,a){n.clientX>e.getBoundingClientRect().left&&(t.value=(a+1).toString())})),o()}})),a.forEach((function(n,e){var a=function(){parseInt(t.value)===e+1?t.value="0":t.value=0===e&&"0"===t.value?"1":(e+1).toString(),o()};n.addEventListener("mouseover",(function(){r&&a()})),n.addEventListener("click",a)}))}else console.error("Priority container not found.");function o(){var n=parseInt(t.value,10);a.forEach((function(e,t){var a,r,o,i;e.style.background=t<n?(r=55*(a=n/5)+255*(1-a),o=46*a+255*(1-a),i=165*a+255*(1-a),"rgb(".concat(Math.round(r),", ").concat(Math.round(o),", ").concat(Math.round(i),")")):"white"}))}}))}else console.error("Container for to-dos not found.")},n}();var Ae,pe=function(){function n(){this.projects=[],this.projectCounter=1,this.activeTabHistory=[]}return n.prototype.addProject=function(){var n=new g(this.projectCounter++);this.projects.push(n),this.renderProject(n)},n.prototype.addTabToProject=function(n){var e=this.projects.find((function(e){return e.id===n}));if(e){var t=e.tabs.length+1,a=new C(t);return e.tabs.push(a),this.renderTabsForProject(e),t}},n.prototype.addToDoToTab=function(n,e){var t=this.projects.find((function(e){return e.id===n})),a=null==t?void 0:t.tabs.find((function(n){return n.id===e}));if(a)if(a.toDos.length>=17)console.error("Cannot add more than 17 to-dos to tab ID: ".concat(e));else if(a){var r=a.toDos.length+1,o=new b(r);a.toDos.push(o),this.renderToDosForTab(a,t)}else console.error("Project or Tab not found, cannot add ToDo. Project ID: ".concat(n,", Tab ID: ").concat(e))},n.prototype.setActiveProject=function(n){var e=this;this.projects.forEach((function(n){n.isActive=!1,e.updateProjectClass(n,!1),n.tabs.forEach((function(t){t.isDisplayed=!1,e.updateTabVisibility(t,!1,n.id)}))}));var t=this.projects.find((function(e){return e.id===n}));t&&(t.isActive=!0,this.updateProjectClass(t,!0),t.tabs.forEach((function(n){n.isDisplayed=!0,e.updateTabVisibility(n,!0,t.id)})))},n.prototype.setActiveTab=function(n,e){var t=this,a=this.projects.find((function(e){return e.id===n}));if(a){a.tabs.forEach((function(n){n.isActive=!1,t.updateTabClass(a,n,!1),n.toDos.forEach((function(e){e.isDisplayed=!1,t.updateToDoVisibility(e,!1,n.id,a.id)}))}));var r=a.tabs.find((function(n){return n.id===e}));r?(this.removeFromActiveTabHistory(n,e),r.isActive=!0,this.updateTabClass(a,r,!0),this.activeTabHistory.push({projectId:n,tabId:e}),r.toDos.forEach((function(a){a.isDisplayed=!0,t.updateToDoVisibility(a,!0,e,n)}))):console.error("Tab with ID: ".concat(e," not found in project with ID: ").concat(n))}else console.error("Project with ID: ".concat(n," not found."))},n.prototype.updateTabVisibility=function(n,e,t){var a=this,r=document.querySelector('[id="project-'.concat(t,"-tab-").concat(n.id,'"]'));r?e?(r.classList.remove("visually-hidden"),n.toDos.forEach((function(e){a.updateToDoVisibility(e,!0,n.id,t)}))):(r.classList.add("visually-hidden"),n.toDos.forEach((function(e){a.updateToDoVisibility(e,!1,n.id,t)}))):console.error('Tab DOM element with id="project-'.concat(t,"-tab-").concat(n.id,'" not found.'))},n.prototype.updateToDoVisibility=function(n,e,t,a){var r=document.querySelector("#to-do-project-".concat(a,"-tab-").concat(t,"-todo-").concat(n.id));r?e?r.classList.remove("visually-hidden"):r.classList.add("visually-hidden"):console.error('toDo DOM element with id="project-'.concat(a,"-tab-").concat(t,"-todo-").concat(n.id,'" not found.'))},n.prototype.updateProjectClass=function(n,e){var t=document.querySelector('[id="project-'.concat(n.id,'"]'));t?t.classList.toggle("active",e):console.error('Project DOM element with data-id="project-'.concat(n.id,'" not found.'))},n.prototype.updateTabClass=function(n,e,t){var a=document.querySelector('[id="project-'.concat(n.id,"-tab-").concat(e.id,'"]'));a&&a.classList.toggle("active",t)},n.prototype.deleteToDoFromTab=function(n,e,t){var a=this.projects.find((function(e){return e.id===n})).tabs.find((function(n){return n.id===e})),r=a.toDos.findIndex((function(n){return n.id===t}));r>-1&&a.toDos.splice(r,1)},n.prototype.checkAndDeleteEmptyTab=function(n,e){var t=this.projects.find((function(e){return e.id===n})),a=null==t?void 0:t.tabs.find((function(n){return n.id===e}));if(a&&0===a.toDos.length){this.activeTabHistory=this.activeTabHistory.filter((function(t){return!(t.projectId===n&&t.tabId===e)}));var r=t.tabs.findIndex((function(n){return n.id===e}));if(r>-1&&t.tabs.splice(r,1),this.removeTabFromDom(n,e),0===(null==t?void 0:t.tabs.length))this.fallbackToLastActiveTab();else{var o=t.tabs[t.tabs.length-1].id;this.setActiveTab(n,o)}}},n.prototype.removeTabFromDom=function(n,e){var t=document.querySelector("#project-".concat(n,"-tab-").concat(e));t&&t.parentNode&&t.parentNode.removeChild(t)},n.prototype.renderProject=function(n){se.renderProject(n)},n.prototype.renderTabsForProject=function(n){var e=n.tabs[n.tabs.length-1];se.renderTab(e,n)},n.prototype.renderToDosForTab=function(n,e){var t=n.toDos[n.toDos.length-1];se.renderToDo(t,n,e)},n.prototype.fallbackToLastActiveTab=function(){if(this.activeTabHistory.length>0){var n=this.activeTabHistory.pop();n&&this.setActiveTab(n.projectId,n.tabId)}else console.error("No previous active tabs to fallback to.")},n.prototype.removeFromActiveTabHistory=function(n,e){this.activeTabHistory=this.activeTabHistory.filter((function(t){return!(t.projectId===n&&t.tabId===e)}))},n}();(Ae=new pe).addProject(),Ae.addTabToProject(1),Ae.addToDoToTab(1,1),Ae.setActiveProject(1),Ae.setActiveTab(1,1),document.addEventListener("click",(function(n){if(n.target instanceof HTMLElement){var e=n.target.id;switch(!0){case"new-project-1"===e:!function(){var n=Ae.projects[Ae.projects.length-1].id+1;if(15!==Ae.projects.length){Ae.addProject(),Ae.setActiveProject(n);var e=Ae.addTabToProject(n);e&&(Ae.setActiveTab(n,e),Ae.addToDoToTab(n,e),console.log(n,e))}else console.error("Cannot add more than 15 projects")}();break;case n.target.classList.contains("project"):!function(n){var e=n.id,t=e.match(/^project-(\d+)$/);if(t&&t[1]){var a=parseInt(t[1],10);if(isNaN(a))console.error("Failed to parse project ID:",e);else{Ae.setActiveProject(a);var r=Ae.projects.find((function(n){return n.id===a}));if(r&&r.tabs.length>0){var o=r.tabs[0].id;Ae.setActiveTab(a,o)}}}else console.error("Invalid ID format:",e)}(n.target);break;case n.target.classList.contains("tab"):!function(n){var e=n.id,t=e.match(/^project-(\d+)-tab-(\d+)$/);if(t&&t[1]&&t[2]){var a=parseInt(t[1],10),r=parseInt(t[2],10);isNaN(a)||isNaN(r)?console.error("Failed to parse IDs:",e):(Ae.setActiveTab(a,r),console.log(a+r))}else console.error("Invalid ID format:",e)}(n.target);break;case n.target.classList.contains("new-to-do"):!function(){var n=document.querySelector(".project.active"),e=document.querySelector(".tab.active");if(console.log(n,e),n&&e){var t=n.id.match(/^project-(\d+)$/),a=e.id.match(/^project-(\d+)-tab-(\d+)$/);if(t&&a){var r=parseInt(t[1],10),o=parseInt(a[2],10);isNaN(r)||isNaN(o)?console.error("Failed to parse project/tab IDs."):(Ae.addToDoToTab(r,o),console.log(r,o,"to-do"))}else console.error("Failed to match project/tab IDs.")}else console.error("No active project or tab found.")}();break;case"new-tab"===e:!function(){var n=document.querySelector(".project.active");if(n){var e=n.id.match(/^project-(\d+)$/);if(e){var t=parseInt(e[1],10);if(!isNaN(t)){var a=Ae.projects.find((function(n){return n.id===t}));if(a.tabs.length<10){Ae.addTabToProject(t);var r=a.tabs[a.tabs.length-1].id;console.log(r),Ae.addToDoToTab(t,r),Ae.setActiveTab(t,r)}}}}}();break;case n.target.classList.contains("delete-todo"):!function(n){var e=n.closest(".to-do-row"),t=null==e?void 0:e.id.match(/to-do-project-(\d+)-tab-(\d+)-todo-(\d+)/);if(t){var a=parseInt(t[1],10),r=parseInt(t[2],10),o=parseInt(t[3],10);isNaN(a)||isNaN(r)||isNaN(o)||(Ae.deleteToDoFromTab(a,r,o),e.remove(),Ae.checkAndDeleteEmptyTab(a,r))}}(n.target)}}}))},12:(n,e,t)=>{n.exports=t.p+"412e696f03ed9b802be7.svg"},203:(n,e,t)=>{n.exports=t.p+"d1d343cf8aa91d96da27.svg"},432:(n,e,t)=>{n.exports=t.p+"8bbbf55d81159231eef1.svg"},290:(n,e,t)=>{n.exports=t.p+"6c539415d7e4d13b85a5.svg"}},n=>{n(n.s=548)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,